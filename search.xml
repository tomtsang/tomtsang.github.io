<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[mongodb]]></title>
      <url>%2F2017%2F02%2F04%2Fmongodb-4%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker之docker-mariadb-galera(panubo版)(2017-02)]]></title>
      <url>%2F2017%2F02%2F04%2Fdocker-7%2F</url>
      <content type="text"><![CDATA[https://github.com/panubo/docker-mariadb-galera node0, 10.10.13.110, primarynode1, 10.10.15.240node2, 10.10.12.13(这一台暂时没用上) 拉取 (panubo版)git 代码, 取 image 三台机器, 各运行一下 mkdir ~/docker &amp;&amp; cd ~/docker &amp;&amp; git clone https://github.com/panubo/docker-mariadb-galera &amp;&amp; cd docker-mariadb-galera/ &amp;&amp; docker pull panubo/mariadb-galera 设置环境变量 在node0上: cat &gt;&gt; ~/.bashrc &lt;&lt; EOF WSREP_NODE_ADDRESS=10.10.13.110 WSREP_CLUSTER_ADDRESS=gcomm://10.10.13.110:4567,10.10.12.13:4567,10.10.15.240:4567 WSREP_CLUSTER_NAME=my_wsrep_cluster WSREP_NODE_NAME=mariadb-node-0 EOF source ~/.bashrc 在node1上: cat &gt;&gt; ~/.bashrc &lt;&lt; EOF WSREP_NODE_ADDRESS=10.10.15.240 WSREP_CLUSTER_ADDRESS=gcomm://10.10.13.110:4567,10.10.12.13:4567,10.10.15.240:4567 WSREP_CLUSTER_NAME=my_wsrep_cluster WSREP_NODE_NAME=mariadb-node-1 EOF source ~/.bashrc 在node2上: cat &gt;&gt; ~/.bashrc &lt;&lt; EOF WSREP_NODE_ADDRESS=10.10.12.13 WSREP_CLUSTER_ADDRESS=gcomm://10.10.13.110:4567,10.10.12.13:4567,10.10.15.240:4567 WSREP_CLUSTER_NAME=my_wsrep_cluster WSREP_NODE_NAME=mariadb-node-2 EOF source ~/.bashrc 打开端口 在每一台机器上: sudo firewall-cmd --permanent --add-port=3306/tcp; sudo firewall-cmd --permanent --add-port=4567/udp; sudo firewall-cmd --permanent --add-port=4567/tcp; sudo firewall-cmd --permanent --add-port=4568/tcp; sudo firewall-cmd --permanent --add-port=4444/tcp; sudo firewall-cmd --reload; sudo firewall-cmd --permanent --list-port; (这一步, 可以不做)Running Garbd 在 node0 上: docker run -d --net host --name galera-garbd \ -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS \ panubo/mariadb-galera \ garbd 运行container, 创建新的数据库目录下 在 node0 上: sudo mkdir -p /mnt/data/galera.service/mysql/mysql 没有道理了哈, 下面这个成功了, 上面几个都没有成功.. docker run -d --net host --name galera -e WSREP_NODE_ADDRESS=$WSREP_NODE_ADDRESS -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS -e MYSQL_ROOT_PASSWORD=like1123 -p 3306:3306 -p 4567:4567/udp -p 4567-4568:4567-4568 -p 4444:4444 -v /mnt/data/galera.service/mysql:/var/lib/mysql:Z panubo/mariadb-galera mysqld --wsrep-new-cluster 这里设置了 , mysql的root用户的密码为like1123 在node1上: sudo mkdir -p /mnt/data/galera.service/mysql/mysql docker run -d --net host --name galera -e WSREP_NODE_ADDRESS=$WSREP_NODE_ADDRESS \ -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS \ -p 3306:3306 \ -p 4567:4567/udp \ -p 4567-4568:4567-4568 \ -p 4444:4444 \ -v /mnt/data/galera.service/mysql:/var/lib/mysql:Z \ panubo/mariadb-galera \ mysqld 连接到 已有的数据库目录/data/mariadb/mysql 下面, 我们连接到 已有的数据库目录/data/mariadb/mysql: 准备工作, 每台机, 关闭, 删除container, 重新启动 docker.service : docker stop 3b8adb3825e1 &amp;&amp; docker rm 3b8adb3825e1 sudo rm -rf /mnt/data/galera.service/mysql sudo systemctl restart docker.service &amp;&amp; sudo systemctl status docker.service 现在开始: 创建 数据库的数据目录, 如果有了, 就不用创建了, 只要把下面的目录修改成 数据目录 就可以了. 在node0上: 因为, 我们这里之前有过 数据库(但是, 不是docker下运行的), 数据库的数据目录为/data/mariadb/mysql, 所以这里直接用了 docker run -d --net host --name galera -e WSREP_NODE_ADDRESS=$WSREP_NODE_ADDRESS -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS -e MYSQL_ROOT_PASSWORD=like1123 -p 3306:3306 -p 4567:4567/udp -p 4567-4568:4567-4568 -p 4444:4444 -v /data/mariadb/mysql:/var/lib/mysql:Z panubo/mariadb-galera mysqld --wsrep-new-cluster 在node1上: docker run -d --net host --name galera -e WSREP_NODE_ADDRESS=$WSREP_NODE_ADDRESS -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS -p 3306:3306 -p 4567:4567/udp -p 4567-4568:4567-4568 -p 4444:4444 -v /data/mariadb/mysql:/var/lib/mysql:Z panubo/mariadb-galera mysqld 添加 node2 进集群 确保一下, 数据库的数据目录为/data/mariadb/mysql 方式与 node1 一样, 直接添加, 就可以了. 在 node2 上: docker run -d --net host --name galera -e WSREP_NODE_ADDRESS=$WSREP_NODE_ADDRESS -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS -p 3306:3306 -p 4567:4567/udp -p 4567-4568:4567-4568 -p 4444:4444 -v /data/mariadb/mysql:/var/lib/mysql:Z panubo/mariadb-galera mysqld 验收: 验收1: 在 node0, 运行 docker exec -ti node11-container-sha1 mysql -p -e &#39;show status like &quot;wsrep_cluster_size&quot;&#39;, 查看 集群的节点数. [tom@mariadb-node-1 ~]$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES c0c6fa26b49a panubo/mariadb-galera &quot;/galera-entrypoin...&quot; 41 hours ago Up 7 hours galera [tom@mariadb-node-1 ~]$ docker exec -ti c0c6fa26b49a mysql -p -e &apos;show status like &quot;wsrep_cluster_size&quot;&apos; Enter password: +--------------------+-------+ | Variable_name | Value | +--------------------+-------+ | wsrep_cluster_size | 2 | +--------------------+-------+ [tom@mariadb-node-1 ~]$ 验收2: 去 node0, 进入container, 新建立一个库, [tom@mariadb-node-0 ~]$ docker exec -it 1de01ad721ad /bin/bash root@mariadb-node-0:/# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 5 Server version: 10.1.21-MariaDB-1~jessie mariadb.org binary distribution Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others. Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement. MariaDB [(none)]&gt; CREATE DATABASE IF NOT EXISTS my_db default character set utf8 COLLATE utf8_general_ci; 去 node1, 进入container, 检查, 是否有 show databases; 或者直接这样: container_sha1=c0c6fa26b49a # 这个是container sha1 字符串 docker exec -ti $container_sha1 mysql -p -e &apos;CREATE DATABASE IF NOT EXISTS my_db default character set utf8 COLLATE utf8_general_ci;&apos; docker exec -ti $container_sha1 mysql -p -e &apos;show databases;&apos; ok, 现在说明, galera已经建立好了. 怎么让其它机器访问 galera 登陆其它机器 mysql -h 10.10.12.17 -u root -pmysql_root_password 这样, 就可以访问到 node0 上的mysql 啦. Q&amp;A Q: 把 node1 的container docker restart , 是否 mysql 正常A: 正常 Q: 把 node0 的container docker restart , 是否mysql 正常A: container, 不正常. 重启后, 起不来了. 原因: 可能是因为, node0, 的安装过程中, 有--wsrep-new-clusterr参数, 重启, 则意味着, 在原来的文件夹上建立一个新的--wsrep-new-clusterr(相同的directory, 当然是不允许的), 所以报错.如果不小心, 重启了 node0上的主container, 那怎么办? 方法1(适用于, 不要数据的情况) 先删除数据, 然后重新启动 docker.service, 就可以了. 方法2(适用于, 已有数据, 且要保留数据的情况) TODO 尝试 TODO Q: 把端口号, 分别设置成node0:3306, node1:4406, node0:4406, node1:3306, node0:4406, node1:4406, 会有什么效果A: TODO]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker系列之目录]]></title>
      <url>%2F2017%2F02%2F02%2Fdocker%2F</url>
      <content type="text"><![CDATA[docker系列之目录 docker之centos7安装docker全过程(2017版) docker之registry搭建 docker之docker-mariadb-galera(panubo版) docker系列之安装（centos）(2016版)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker之centos7安装docker全过程]]></title>
      <url>%2F2017%2F01%2F26%2Fdocker-6%2F</url>
      <content type="text"><![CDATA[确保能够上网sudo vi /etc/resolv.conf ## 效果 [tom@1217 ~]$ cat /etc/resolv.conf # Generated by NetworkManager nameserver 202.96.134.133 nameserver 114.114.114.114 nameserver 8.8.8.8 安装sudo yum install -y yum-utils &amp;&amp; sudo yum-config-manager --add-repo https://docs.docker.com/engine/installation/linux/repo_files/centos/docker.repo &amp;&amp; sudo yum makecache fast &amp;&amp; sudo yum -y install docker-engine -y 启动服务, 把tom加入组sudo systemctl start docker.service &amp;&amp; sudo systemctl enable docker.service &amp;&amp; sudo docker run hello-world &amp;&amp; sudo usermod -aG docker tom &amp;&amp; exit 重新登陆docker run hello-world]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker之registry搭建(jlch内网可用)]]></title>
      <url>%2F2017%2F01%2F26%2Fdocker-8%2F</url>
      <content type="text"><![CDATA[referencehttp://www.zimug.com/317.html?utm_source=tuicool&amp;utm_medium=referral docker-registry contextdocker版本大于1.6.0(docker -v) 机器3台: registry server , IP: 192.168.31.240 registry client a(docker push), IP: 10.10.12.18 registry client b(docker pull), IP: 10.10.13.10 step1. 创建registry server端下载镜像 docker pull registry:2 生成自签名证书 cd ~/;mkdir registry &amp;&amp; cd registry &amp;&amp; mkdir certs &amp;&amp; cd certs;openssl req -x509 -days 3650 -subj &apos;/CN=reg.jlch.com/&apos; -nodes -newkey rsa:2048 -keyout registry.key -out registry.crt; 生成用户和密码 cd ~/registry&amp;&amp; mkdir auth;docker run --entrypoint htpasswd registry:2 -Bbn zimug zimug_password &gt; auth/htpasswd; 用户：zimug 密码：zimug_password 可随便填写自己想填写的 启动registry server 脚本 start_registry.sh 放在~/registry目录下 docker run -d -p 5000:5000 --restart=always --name registry \ -v `pwd`/auth:/auth \ -e &quot;REGISTRY_AUTH=htpasswd&quot; \ -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \ -e &quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot; \ -v `pwd`/certs:/certs \ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/registry.crt \ -e REGISTRY_HTTP_TLS_KEY=/certs/registry.key \ -v ~/data/registry2:/var/lib/registry \ registry:2 确认registry server是UP状态，docker ps -a | grep registry 2. 配置docker server端同registry server在同一台服务器上配置： 创建证书目录(没有此目录自己创建，注意端口号) sudo mkdir -p /etc/docker/certs.d/reg.jlch.com:5000 下载证书 sudo cp ~/registry/certs/registry.crt /etc/docker/certs.d/reg.jlch.com:5000 域名解析,如果有DNS解析无需做此步骤（registry-server-ip=192.168.31.240） sudo echo 192.168.31.240 reg.jlch.com &gt;&gt; /etc/hosts 3. 配置 registry client a 和 registry client b其他主机(registry client a 和 registry client b)配置： 创建证书目录(没有此目录自己创建，注意端口号) sudo mkdir -p /etc/docker/certs.d/reg.jlch.com:5000 下载证书 sudo scp -r tom@192.168.31.240:~/registry/certs/registry.crt /etc/docker/certs.d/reg.jlch.com:5000 域名解析,如果有DNS解析无需做此步骤（registry-server-ip=192.168.31.240） echo 192.168.31.240 reg.jlch.com &gt;&gt; /etc/hosts 验证测试 登陆(注意加端口号) docker login reg.jlch.com:5000 输入用户zimug，密码zimug_password以及邮箱 完成 docker push更改镜像tag docker tag busybox reg.jlch.com:5000/busybox:1.0 push镜像 docker push reg.jlch.com:5000/busybox:1.0 完成 docker pullpull镜像 docker pull reg.jlch.com:5000/busybox:1.0]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker之registry搭建]]></title>
      <url>%2F2017%2F01%2F26%2Fdocker-5%2F</url>
      <content type="text"><![CDATA[referencehttp://www.zimug.com/317.html?utm_source=tuicool&amp;utm_medium=referral docker-registry contextdocker版本大于1.6.0(docker -v) 机器3台: registry server , IP: 10.10.12.17 registry client a(docker push), IP: 10.10.12.18 registry client b(docker pull), IP: 10.10.13.10 step1. 创建registry server端下载镜像 docker pull registry:2 生成自签名证书 cd ~/;mkdir registry &amp;&amp; cd registry &amp;&amp; mkdir certs &amp;&amp; cd certs;openssl req -x509 -days 3650 -subj &apos;/CN=reg.zimug.com/&apos; -nodes -newkey rsa:2048 -keyout registry.key -out registry.crt; 生成用户和密码 cd ~/registry&amp;&amp; mkdir auth;docker run --entrypoint htpasswd registry:2 -Bbn zimug zimug_password &gt; auth/htpasswd; 用户：zimug 密码：zimug_password 可随便填写自己想填写的 启动registry server 脚本 start_registry.sh 放在~/registry目录下 docker run -d -p 5000:5000 --restart=always --name registry \ -v `pwd`/auth:/auth \ -e &quot;REGISTRY_AUTH=htpasswd&quot; \ -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \ -e &quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot; \ -v `pwd`/certs:/certs \ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/registry.crt \ -e REGISTRY_HTTP_TLS_KEY=/certs/registry.key \ -v ~/data/registry2:/var/lib/registry \ registry:2 确认registry server是UP状态，docker ps -a | grep registry 2. 配置docker server端同registry server在同一台服务器上配置： 创建证书目录(没有此目录自己创建，注意端口号) sudo mkdir -p /etc/docker/certs.d/reg.zimug.com:5000 下载证书 sudo cp ~/registry/certs/registry.crt /etc/docker/certs.d/reg.zimug.com:5000 域名解析,如果有DNS解析无需做此步骤（registry-server-ip=10.10.12.17） sudo echo 10.10.12.17 reg.zimug.com &gt;&gt; /etc/hosts 3. 配置 registry client a 和 registry client b其他主机(registry client a 和 registry client b)配置： 创建证书目录(没有此目录自己创建，注意端口号) sudo mkdir -p /etc/docker/certs.d/reg.zimug.com:5000 下载证书 sudo scp -r zimug@10.10.12.17:~/registry/certs/registry.crt /etc/docker/certs.d/reg.zimug.com:5000 域名解析,如果有DNS解析无需做此步骤（registry-server-ip=10.10.12.17） echo 10.10.12.17 reg.zimug.com &gt;&gt; /etc/hosts 验证测试 登陆(注意加端口号) docker login reg.zimug.com:5000 输入用户zimug，密码zimug_password以及邮箱 完成 docker push更改镜像tag docker tag busybox reg.zimug.com:5000/busybox:1.0 push镜像 docker push reg.zimug.com:5000/busybox:1.0 完成 docker pullpull镜像 docker pull reg.zimug.com:5000/busybox:1.0]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker]]></title>
      <url>%2F2017%2F01%2F26%2Fdocker-4%2F</url>
      <content type="text"><![CDATA[https://github.com/EgoAleSum/mariadb-cluster http://withblue.ink/2016/03/09/galera-cluster-mariadb-coreos-and-docker-part-1.html Coreos + any public cloud (Azure, AWS, Google, etc) ## 开端口: sudo firewall-cmd --permanent --add-port=4567/udp; sudo firewall-cmd --permanent --add-port=4567/tcp; sudo firewall-cmd --permanent --add-port=4568/tcp; sudo firewall-cmd --permanent --add-port=4444/tcp; sudo firewall-cmd --permanent --add-port=3306/tcp; sudo firewall-cmd --reload; sudo firewall-cmd --permanent --list-port 检查mysql 是不是起来了: sudo yum install -y telnettelnet 127.0.0.1 22Telnet 127.0.0.1 3306 检查日志 docker logs -f mariadb-container-0 单独启动 docker run \ –name mariadb-container-0 \ -d \ -v /opt/mysql.conf.d:/etc/mysql/conf.d \ -v /data/mariadb_galera/data:/var/lib/mysql \ -e MYSQL_INITDB_SKIP_TZINFO=yes \ -e MYSQL_ROOT_PASSWORD=my-secret-pw \ -p 3306:3306 \ -p 4567:4567/udp \ -p 4567-4568:4567-4568 \ -p 4444:4444 \ mariadb:10.1 \ –wsrep-new-cluster \ –wsrep_node_address=10.10.12.17 docker run \ –name mariadb-container-1 \ -d \ -v /opt/mysql.conf.d:/etc/mysql/conf.d \ -v /data/mariadb_galera/data:/var/lib/mysql \ -p 3306:3306 \ -p 4567:4567/udp \ -p 4567-4568:4567-4568 \ -p 4444:4444 \ mariadb:10.1 \ –wsrep_node_address=10.10.12.18 df]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker之docker-mariadb-galera(panubo版)]]></title>
      <url>%2F2017%2F01%2F24%2Fdocker-3%2F</url>
      <content type="text"><![CDATA[https://github.com/panubo/docker-mariadb-galera node0, 10.10.12.17node1, 10.10.12.18node2, 10.10.13.10(这一台暂时没用上) 拉取 (panubo版)git 代码 mkdir ~/docker &amp;&amp; cd ~/docker &amp;&amp; git clone https://github.com/panubo/docker-mariadb-galera &amp;&amp; cd docker-mariadb-galera/ 设置环境变量 在node0上: cat &gt;&gt; ~/.bashrc &lt;&lt; EOF WSREP_NODE_ADDRESS=10.10.12.17 WSREP_CLUSTER_ADDRESS=gcomm://10.10.12.17:4567,10.10.12.18:4567,10.10.13.10:4567 EOF source ~/.bashrc 在node1上: cat &gt;&gt; ~/.bashrc &lt;&lt; EOF WSREP_NODE_ADDRESS=10.10.12.18 WSREP_CLUSTER_ADDRESS=gcomm://10.10.12.17:4567,10.10.12.18:4567,10.10.13.10:4567 EOF source ~/.bashrc Running Garbd 在 node0 上: docker run -d --net host --name galera-garbd \ -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS \ panubo/mariadb-galera \ garbd 运行container 在node0上: 创建 数据库的数据目录, 如果有了, 就不用创建了, 只要把下面的目录修改成 数据目录 就可以了. mkdir -p /mnt/data/galera.service/mysql/mysql docker run -d --net host --name galera \ -e WSREP_NODE_ADDRESS=$WSREP_NODE_ADDRESS \ -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS \ -e MYSQL_ROOT_PASSWORD={{mysql_root_password}} \ -p 3306:3306 \ -p 4567:4567/udp \ -p 4567-4568:4567-4568 \ -p 4444:4444 \ -v /mnt/data/galera.service/mysql:/var/lib/mysql:Z \ panubo/mariadb-galera \ mysqld \ --wsrep-new-clusterr 在node1上: mkdir -p /mnt/data/galera.service/mysql/mysql docker run -d --net host --name galera \ -e WSREP_NODE_ADDRESS=$WSREP_NODE_ADDRESS \ -e WSREP_CLUSTER_ADDRESS=$WSREP_CLUSTER_ADDRESS \ -p 3306:3306 \ -p 4567:4567/udp \ -p 4567-4568:4567-4568 \ -p 4444:4444 \ -v /mnt/data/galera.service/mysql:/var/lib/mysql:Z \ panubo/mariadb-galera \ mysqld 验收: 验收1: 在 node0, 运行 docker exec -ti node11-container-sha1 mysql -p -e &#39;show status like &quot;wsrep_cluster_size&quot;&#39;, 查看 集群的节点数. [tom@mariadb-node-1 ~]$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES c0c6fa26b49a panubo/mariadb-galera &quot;/galera-entrypoin...&quot; 41 hours ago Up 7 hours galera [tom@mariadb-node-1 ~]$ docker exec -ti c0c6fa26b49a mysql -p -e &apos;show status like &quot;wsrep_cluster_size&quot;&apos; Enter password: +--------------------+-------+ | Variable_name | Value | +--------------------+-------+ | wsrep_cluster_size | 2 | +--------------------+-------+ [tom@mariadb-node-1 ~]$ 验收2: 去 node0, 进入container, 新建立一个库, [tom@mariadb-node-0 ~]$ docker exec -it 1de01ad721ad /bin/bash root@mariadb-node-0:/# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 5 Server version: 10.1.21-MariaDB-1~jessie mariadb.org binary distribution Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others. Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement. MariaDB [(none)]&gt; CREATE DATABASE IF NOT EXISTS my_db default character set utf8 COLLATE utf8_general_ci; 去 node1, 进入container, 检查, 是否有 show databases; ok, 现在说明, galera已经建立好了. 怎么让其它机器访问 galera 登陆其它机器 mysql -h 10.10.12.17 -u root -pmysql_root_password 这样, 就可以访问到 node0 上的mysql 啦. 尝试 TODO Q: 把 node1 的container docker restart , 是否 mysql 正常A: 正常 Q: 把 node0 的container docker restart , 是否mysql 正常A: container, 不正常. 重启后, 起不来了. 原因: 可能是因为, node0, 的安装过程中, 有--wsrep-new-clusterr参数, 重启, 则意味着, 在原来的文件夹上建立一个新的--wsrep-new-clusterr(相同的directory, 当然是不允许的), 所以报错.如果不小心, 重启了 node0上的主container, 那怎么办?方法1(适用于, 不要数据的情况) Q: 把端口号, 分别设置成node0:3306, node1:4406, node0:4406, node1:3306, node0:4406, node1:4406, 会有什么效果A: TODO]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker之docker-mariadb-galera各种策略汇总]]></title>
      <url>%2F2017%2F01%2F24%2Fdocker-2%2F</url>
      <content type="text"><![CDATA[使用 FROM mariadb:10.1 的几个docker https://github.com/EgoAleSum/mariadb-cluster http://withblue.ink/2016/03/09/galera-cluster-mariadb-coreos-and-docker-part-1.html Coreos + any public cloud (Azure, AWS, Google, etc) https://github.com/dial-once/docker-mariadb-galera 使用 Docker Cloud/Docker Compose YML https://github.com/toughIQ/docker-mariadb-cluster Swarm Consider this a POC and not a production ready system! Built for use with Docker 1.12.1+ in Swarm Mode https://github.com/panubo/docker-mariadb-galera Galera Arbitrator (aka garbd) end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mac下运行.exe文件]]></title>
      <url>%2F2017%2F01%2F15%2Fmac-1%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[mac]]></title>
      <url>%2F2017%2F01%2F15%2Fmac%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F12%2F14%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之]]></title>
      <url>%2F2016%2F12%2F12%2Fmysql-9%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker系列之安装（centos）]]></title>
      <url>%2F2016%2F12%2F12%2Fdocker-1%2F</url>
      <content type="text"><![CDATA[参考https://docs.docker.com/engine/installation/linux/centos/ practice[tom@mysql1 ~]$ sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos; &gt; [dockerrepo] &gt; name=Docker Repository &gt; baseurl=https://yum.dockerproject.org/repo/main/centos/7/ &gt; enabled=1 &gt; gpgcheck=1 &gt; gpgkey=https://yum.dockerproject.org/gpg &gt; EOF [dockerrepo] name=Docker Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7/ enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg [tom@mysql1 ~]$ sudo yum install docker-engine -y ... Installed: docker-engine.x86_64 0:1.12.3-1.el7.centos Dependency Installed: docker-engine-selinux.noarch 0:1.12.3-1.el7.centos Complete! [tom@mysql1 ~]$ sudo systemctl enable docker.service Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service. [tom@mysql1 ~]$ sudo systemctl start docker [tom@mysql1 ~]$ sudo docker run --rm hello-world Unable to find image &apos;hello-world:latest&apos; locally latest: Pulling from library/hello-world c04b14da8d14: Pull complete Digest: sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker Hub account: https://hub.docker.com For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ [tom@mysql1 ~]$ sudo groupadd docker groupadd: group &apos;docker&apos; already exists [tom@mysql1 ~]$ sudo usermod -aG docker tom ctrl + v[tom@mysql1 ~]$ sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos; &gt; [dockerrepo] &gt; name=Docker Repository &gt; baseurl=https://yum.dockerproject.org/repo/main/centos/7/ &gt; enabled=1 &gt; gpgcheck=1 &gt; gpgkey=https://yum.dockerproject.org/gpg &gt; EOF [dockerrepo] name=Docker Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7/ enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg [tom@mysql1 ~]$ sudo yum install docker-engine -y [tom@mysql1 ~]$ sudo systemctl enable docker.service [tom@mysql1 ~]$ sudo systemctl start docker [tom@mysql1 ~]$ sudo docker run --rm hello-world [tom@mysql1 ~]$ sudo groupadd docker [tom@mysql1 ~]$ sudo usermod -aG docker tom]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[gitlab系列之workflow]]></title>
      <url>%2F2016%2F12%2F01%2Fgitlab-1%2F</url>
      <content type="text"><![CDATA[本文是 官方 workflow 的中文翻译 参考https://docs.gitlab.com/ee/workflow/gitlab_flow.html 中文介绍使用git进行版本管理使得分支和合并比旧版本系统（如SVN）容易得多。 这允许多种分支策略和工作流程。 几乎所有这些都是对git之前使用的方法的改进。 但是许多组织最终没有明确定义，过于复杂或没有与问题跟踪系统（issue tracking systems）集成的，工作流。 因此，我们建议GitLab flow作为明确定义的一套最佳实践。 它结合了功能驱动开发和功能分支的问题跟踪。 来自其他版本控制系统的组织经常发现很难开发有效的工作流。 本文介绍“将git工作流与问题跟踪系统集成”的GitLab流程。 它提供了一个简单，透明和有效的方式使用git。 当转换到git时，你必须习惯于在与同事共享提交之前有三个步骤。 大多数版本控制系统只有一个步骤，从工作副本提交到共享服务器。 在git中，您可以将文件从工作副本添加到暂存区域。 之后，你提交他们到本地回购。 第三步是推送到共享远程存储库。 在习惯了这三个步骤之后，分支模型成为挑战。 因为许多组织，对于git是新认识，没有公约如何使用它，那么很快git变成一团糟。 他们遇到的最大的问题是，许多长期运行的分支，每个包含了一部分的变化。 人们很难确定他们应该开发或部署到生产的是哪个分支。 通常对这个问题的反应是采用标准化模式，例如git流和GitHub流。 我们认为仍有改进的余地，并将详细介绍一组我们称为GitLab流程的做法。 Git flow and its problems Git流是一个第一建议使用git分支的vcs，它得到了很多的关注。它主张一个主分支、一个单独开发分支以及支持特性功能开发，发布版本和修补程序的其它分支。开发发生在开发分支上，移动到发布分支，并最终合并到主分支。 Git流是有一个定义良好的标准，但它的复杂性引入了两个问题。第一个问题是开发人员必须使用develop分支而不是master，master是保留给用于发布生产版本的代码。这是一个约定，称默认分支为master，并主要从此master分支，合并到此master。由于大多数工具自动使master分支成为默认分支，并在默认情况下显示该分支，因此必须切换到另一个分支。git流的第二个问题是修补程序和发布分支引入的复杂性。这些分支对于一些组织来说可能是一个好主意，但对于绝大多数组织来说是过分了。现在大多数组织实施持续交付，这意味着可以部署您的默认master分支。这意味着要prevented修补程序和发布分支，包括它们引入的所有仪式（ceremony）。这个仪式的一个例子是合并发布分支。虽然存在专门的工具来解决这个问题，但它们需要文档并增加复杂性。开发人员经常犯错误，例如更改只会合并到master中，而不会合并到develop分支中。这些错误的根本原因是git流对于大多数用例来说太复杂了。并且发布并不自动意味着也做修补程序。 GitHub flow as a simpler alternative 在对git流的应对中，一个更简单的选择是，详细的GitHub流。 此流仅具有特征分支和master分支。 这是非常简单和干净，许多组织已经采用它与巨大的成功。 Atlassian推荐一个类似的策略，虽然他们rebase特征分支。 将所有内容合并到主分支并经常部署,意味着您最小化“库存”中的代码量，这符合精益和持续交付最佳实践。 但是这个流程仍然有许多关于部署，环境，发布和问题集成的问题。 使用GitLab流程，我们为这些问题提供额外的指导。 Production branch with GitLab flow GitHub流假设你能够在每次合并特性分支时都部署到生产环境。这对于SaaS应用程序是可能的，但在许多情况下，这是不可能的。一种情况是，你不能控制确切的发布时刻，例如需要通过App Store验证的iOS应用程序。另一个例子是，当您有部署窗口时间（工作日从上午10点到下午4点，当操作团队满员时），但您也可以在其他时间合并代码。在这些情况下，您可以创建一个反映部署代码的生产分支。您可以通过将master合并到生产（production）分支来部署新版本。如果你需要知道在生产分支中是什么代码，你可以只是checkout到生产分支看看。部署的大致时间，很容易显示为版本控制系统中的合并提交时间。如果您自动部署生产分支，这一时间是相当准确的。如果您需要更准确的时间，您可以让部署脚本在每个部署中创建一个tag。此流防止了，git流的发布，标记和合并的开销。 Environment branches with GitLab flow 建立一个自动更新到master分支的环境可能是个好主意。只有在这种情况下，此环境的名称可能与分支名称不同。假设您有一个暂存环境（staging environment），一个预生产环境和一个生产环境。在这种情况下，主分支将部署在暂存环境。当有人想要部署到预生产时，他们创建从主分支到预生产分支的合并请求。并且通过合并预生产分支到生产分支。此工作流只提交下游流确保一切都已在所有环境中测试过。如果您需要使用修补程序选择一个提交，通常在特性分支上进行开发，并将其与合并请求合并到master中，不要删除特性分支。如果master是好的（它应该是好的，如果你是连续交付的），然后将它合并到其他分支（也就是合并到预生产环境和生产环境）。如果这是不可能的（因为可能需要更多的手动测试），您可以将功能分支的合并请求发送到下游分支。 环境分支的一个“极端”版本，就是，正在为Teatro所做的，每个功能分支设置一个环境。 Release branches with GitLab flow 只有在需要将软件发布到外部世界的情况下，您才需要使用版本发布分支。在这种情况下，每个分支包含次要版本（2-3稳定版，2-4稳定版等）。稳定分支使用master作为起点，并尽可能晚地创建。通过尽可能晚的提交分支，您必须将错误修复应用到多个分支的时间最小化。在发布了一个发布分支后，只有严重的错误修复包括在发布分支中。如果可能的话，这些错误修复首先合并到master中，然后进入发布分支。这种方式下，你不能忘记cherry-picked他们进 master 和 遇到相同的bug的后续版本。这称为“上游第一”策略，也是由Google和Red Hat实施的。每次在发布分支中包括错误修复时，通过设置新标签来提高补丁版本（以符合语义版本控制）。一些项目也有一个稳定的分支，指向与最新发布的分支相同的提交。在这个流程中，有一个生产分支（或git flow master分支）是不常见的。 Merge/pull requests with GitLab flow 合并或拉取请求在git管理应用程序中创建，并要求分配任务的人合并两个分支。诸如GitHub和Bitbucket之类的工具选择名称为拉动请求（pull request），因为第一个手动动作将是拉取pull特征分支。诸如GitLab和其他工具之类的工具选择名称为合并请求（merge request），因为最终动作是请求代理人的动作。在本文中，我们将它们称为合并请求。 如果你在一个功能分支上工作超过几个小时，最好与团队的其他成员分享中间结果。这可以通过创建合并请求（而不是将任务分配给任何人，相应地，你在（描述或注释中）提醒其他人），来完成。这意味着它还没有准备好被合并，但欢迎反馈。您的团队成员可以对一般的合并请求或具有行注释的特定行，发表评论。合并请求作为代码审查工具，不需要单独的工具，如Gerrit和reviewboard。如果审查揭示了缺点（shortcomings），任何人可以提交和推动修复。通常，这样做的人，是合并/拉取请求的创建者。当在分支上推送新提交时，merge / pull请求中的diff会自动更新。 当你觉得合并它的时候，你可以把它分配给那些最了解你正在改变的代码库的人，并提及 你希望从任何其他人那里得到反馈的人员名单。有更多的反馈空间，在分配的人员后，进行分支合并的结果，会让人感到舒适。如果被分配的人不舒服，他们可以关闭合并请求而不合并。 在GitLab中，通常保护长期分支（例如master分支），以便正常的开发人员不能修改这些受保护的分支。所以如果你想把它合并到一个受保护的分支，你可以将它分配给有master权限的人。 Issues with GitLab flow GitLab流是一种使代码和问题跟踪之间的关系更透明的方式。 代码的任何重大更改应从描述目标的问题（issue）开始。每个代码更改的原因是重要的通知团队中的每个人，并帮助人们保持功能分支的范围小。在GitLab中，对代码库的每个更改都从问题跟踪系统中的问题开始。如果有重大的工作被涉及（超过1小时），即使没有issue，那也应该首先创建issue。对于许多组织，这将是自然的，因为问题（issue）将必须被估计。问题标题应该描述系统的期望状态，例如“作为管理员，我要删除用户, 而不是收到一个error”，而不是“管理员无法删除用户”。 当您准备好编码时，从master分支启动一个问题分支。此分支的名称应以问题编号开头，例如’15 -require-a-password-to-change-it’。 当你完成代码了或者当你想讨论代码时，你要打开一个合并请求。这是一个在线的地方，用于讨论这次更改，并且审查代码。打开合并请求是手动操作，因为您不是总想合并您推送的新分支，它可能是长期运行的环境或发布分支。如果打开合并请求，但没有将其分配给任何人，则它是一个处于“正在进行（Work In Progress）”状态的合并请求。这些用于讨论某些建议的实现，但尚未准备好纳入master分支中。专家提示：合并请求的标题使用[WIP]或WIP作为开始，以防止合并请求在准备就绪之前被合并了。 当作者认为代码就绪时，合并请求将分配给审阅者（reviewer）。当审阅者认为代码准备放进在master分支中时，就按下合并按钮。在这种情况下，代码被合并，并生成合并提交，使此事件后来很容易可见。合并请求总是创建一个合并提交，即使当commit可以被添加(added)，但是没有一个提交。这个合并策略在git中称为“no fast-forward”。合并后，特征分支被删除，因为它不再需要。在GitLab中，这种删除动作在合并时，是可选的。 假设分支被合并，但是在这合并后又发现一个新问题，那就重新打开这个问题。在这种情况下，重用相同的分支名称是没有问题的，因为当合并分支时它被删除。任何时候，每个问题最多只有一个分支。一个特征分支可能解决多个问题。 Linking and closing issues from merge requests 链接到问题（issue）会在下面这个情况下发生：在提交消息（修复＃14，关闭＃67等）中提及，或从合并请求描述中提及。 合并请求提及问题（issue）的情况，在GitLab中，会在这个issue中，创建一个注解。 并且合并请求会显示这个linked issues。 一旦代码合并到默认分支中，这些问题就会关闭。 如果你只想参考没有关闭的issue，你也可以提到它：“Duck typing是首选。＃12”。 如果您有跨多个存储库的问题，最好的办法是为每个存储库创建一个问题，并将所有问题链接到父问题(parent issue)。 Squashing commits with rebase 使用git，您可以使用交互式rebase（rebase -i）将多个提交压缩成一个并重新排序。在GitLab EE和.com中，您还可以在Web界面合并之前进行rebase。如果您在开发过程中进行了一些小的更改，并希望用单个提交替换它们，或者想要使顺序更具逻辑性，则此功能非常有用。然而，你不应该rebase提交推送到远程服务器。有人可以参考提交或樱桃选择他们。当你rebase时，你改变提交的标识符（SHA-1），这是令人困惑的。如果你这样做，相同的更改将在多个标识符下，这可能会导致很多混乱。如果人们已经审查你的代码，他们将很难仅仅审查自那时以来由你所做的改进，如果你已经rebased 一切修改为一个提交。不要rebase的另一个原因是，你失去了作者信息，也许有人创建了一个合并请求，另一个人推送一个提交，以改善它，第三个合并它。在这种情况下，将所有提交重新映射为一个，以防止其他作者，被正确归因和共享一部分git blame。 鼓励人们经常提交，并经常推送到远程存储库，以便其他人知道每个人都在做什么。这将导致每个更改的许多提交，这使得历史更难以理解。但是具有稳定的标识符（stable identifiers）的优点胜过这个缺点。为了理解上下文中的变化，可以总是去看合并提交，因为当代码合并到master分支时会将所有提交被分组在一起。 将特性分支的多个提交合并到主分支后，这更难撤消。如果你将所有的提交压缩成一个你可以刚刚恢复这个提交，但正如我们所指出的，你不应该在提交后重做提交。幸运的是，还原在一段时间以前的合并，是可以用git完成的。但是，这需要对您要恢复的提交，进行一个特定合并提交（specific merge commits）。如果你还原合并，你又改变主意，那么你要恢复这次还原（而不是再次合并），因为git将不允许你再次合并代码。 能够还原合并（revert a merge）是一个很好的原因，当您手动用–no-ff选项合并时，始终创建合并提交。当您接受合并请求时，Git管理软件将始终创建合并提交。 Do not order commits with rebase END]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[gitlab系列之]]></title>
      <url>%2F2016%2F12%2F01%2Fgitlab%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[nodejs系列之npm报错]]></title>
      <url>%2F2016%2F11%2F30%2Fnodejs-2%2F</url>
      <content type="text"><![CDATA[报错报错1，permission denied, open &#39;/usr/local/lib/node_modules/npm/lib/tom@adata:~/in/ttt$ npm i npm ERR! Linux 4.4.0-47-generic npm ERR! argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;i&quot; npm ERR! node v6.9.1 npm ERR! npm v3.10.8 npm ERR! path /usr/local/lib/node_modules/npm/lib/fetch-package-metadata.js npm ERR! code EACCES npm ERR! errno -13 npm ERR! syscall open npm ERR! Error: EACCES: permission denied, open &apos;/usr/local/lib/node_modules/npm/lib/fetch-package-metadata.js&apos; npm ERR! at Error (native) npm ERR! at Object.fs.openSync (fs.js:640:18) npm ERR! at Object.fs.readFileSync (fs.js:508:33) npm ERR! at Object.Module._extensions..js (module.js:578:20) npm ERR! at Module.load (module.js:487:32) npm ERR! at tryModuleLoad (module.js:446:12) npm ERR! at Function.Module._load (module.js:438:3) npm ERR! at Module.require (module.js:497:17) npm ERR! at require (internal/module.js:20:19) npm ERR! at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/install/deps.js:15:28) npm ERR! { Error: EACCES: permission denied, open &apos;/usr/local/lib/node_modules/npm/lib/fetch-package-metadata.js&apos; npm ERR! at Error (native) npm ERR! at Object.fs.openSync (fs.js:640:18) npm ERR! at Object.fs.readFileSync (fs.js:508:33) npm ERR! at Object.Module._extensions..js (module.js:578:20) npm ERR! at Module.load (module.js:487:32) npm ERR! at tryModuleLoad (module.js:446:12) npm ERR! at Function.Module._load (module.js:438:3) npm ERR! at Module.require (module.js:497:17) npm ERR! at require (internal/module.js:20:19) npm ERR! at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/install/deps.js:15:28) npm ERR! errno: -13, npm ERR! code: &apos;EACCES&apos;, npm ERR! syscall: &apos;open&apos;, npm ERR! path: &apos;/usr/local/lib/node_modules/npm/lib/fetch-package-metadata.js&apos; } npm ERR! npm ERR! Please try running this command again as root/Administrator. npm ERR! Please include the following file with any support request: npm ERR! /home/tom/in/ttt/npm-debug.log tom@adata:~/in/ttt$_ 解决： 先查node，npm版本 tom@adata:~/in/ttt$ node -v v6.9.1 tom@adata:~/in/ttt$ ls -l /usr/local/sbin/bin/n* ls: cannot access &apos;/usr/local/sbin/bin/n*&apos;: No such file or directory tom@adata:~/in/ttt$ which node /usr/local/bin/node tom@adata:~/in/ttt$ ls -l /usr/local/bin/n* -rwxr-xr-x 1 root root 30194989 11月 24 09:45 /usr/local/bin/node lrwxrwxrwx 1 root root 38 11月 24 09:45 /usr/local/bin/npm -&gt; ../lib/node_modules/npm/bin/npm-cli.js tom@adata:~/in/ttt$ 发现，npm是一个软链接，所以，可能问题出在这里，这样呢，我们更新一下 npm 本身吧。sudo npm i npm -g。走起。 tom@adata:~/in/ttt$ sudo npm i npm -g [sudo] password for tom: /usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js - retry@0.10.0 node_modules/npm/node_modules/npm-registry-client/node_modules/retry - core-util-is@1.0.2 node_modules/npm/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/core-util-is - isarray@1.0.0 node_modules/npm/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/isarray - process-nextick-args@1.0.7 node_modules/npm/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/process-nextick-args - string_decoder@0.10.31 node_modules/npm/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/string_decoder - util-deprecate@1.0.2 node_modules/npm/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/util-deprecate - readable-stream@2.0.6 node_modules/npm/node_modules/request/node_modules/bl/node_modules/readable-stream - bl@1.1.2 node_modules/npm/node_modules/request/node_modules/bl - async@1.5.2 node_modules/npm/node_modules/request/node_modules/form-data/node_modules/async /usr/local/lib └─┬ npm@4.0.2 ├── asap@2.0.5 ├── config-chain@1.1.11 ... ... ... tom@adata:~/in/ttt$ 我们重新再尝试吧。 tom@adata:~/in/ttt$ ls package.json tom@adata:~/in/ttt$ npm i openQuote2@2.0.0 /home/tom/in/ttt ├── async@1.5.2 ├─┬ mongodb@2.2.12 │ ├── es6-promise@3.2.1 │ ├─┬ mongodb-core@2.0.14 │ │ ├── bson@0.5.7 │ │ └─┬ require_optional@1.0.0 │ │ ├── resolve-from@2.0.0 │ │ └── semver@5.3.0 │ └─┬ readable-stream@2.1.5 │ ├── buffer-shims@1.0.0 │ ├── core-util-is@1.0.2 │ ├── inherits@2.0.3 │ ├── isarray@1.0.0 │ ├── process-nextick-args@1.0.7 │ ├── string_decoder@0.10.31 │ └── util-deprecate@1.0.2 └─┬ mysql@2.12.0 ├── bignumber.js@2.4.0 ├─┬ readable-stream@1.1.14 │ └── isarray@0.0.1 └── sqlstring@2.2.0 tom@adata:~/in/ttt$ 好了，成功了。但是，我重新再去查 tom@adata:~/in/ttt$ which npm /usr/local/bin/npm tom@adata:~/in/ttt$ which node /usr/local/bin/node tom@adata:~/in/ttt$ ls -l /usr/local/bin/n* -rwxr-xr-x 1 root root 30194989 11月 24 09:45 /usr/local/bin/node lrwxrwxrwx 1 root root 38 11月 24 09:45 /usr/local/bin/npm -&gt; ../lib/node_modules/npm/bin/npm-cli.js tom@adata:~/in/ttt$ tom@adata:~/in/ttt$ npm -v 4.0.2 tom@adata:~/in/ttt$ 发现只更新了 npm 的版本，而已呀。看来，升级npm，才是解决这个问题的关键。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nodejs系列之mongodb]]></title>
      <url>%2F2016%2F11%2F30%2Fnodejs-1%2F</url>
      <content type="text"><![CDATA[var mongodb = require(“mongodb”); 这个 mongodb 包的API文档： http://mongodb.github.io/node-mongodb-native/2.2/api/index.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mongodb系列之update]]></title>
      <url>%2F2016%2F11%2F29%2Fmongodb-3%2F</url>
      <content type="text"><![CDATA[只要是批量，后头加 {multi: true} 吧。 批量，新增一个k-vdb.Signals_Day.update({TrdDt:20161129}, {$set: {“Real”: true}}, {multi: true}) testrs:PRIMARY&gt; db.Signals_Day.update({TrdDt:20161129}, {$set: {&quot;Real&quot;: true}}, {multi: true}) WriteResult({ &quot;nMatched&quot; : 8935, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 8933 }) testrs:PRIMARY&gt; db.Signals_Day.find({TrdDt:20161129}) { &quot;_id&quot; : ObjectId(&quot;583d27735868c24cb078e925&quot;), &quot;Type&quot; : &quot;NewHighLow&quot;, &quot;Sign&quot; : -1, &quot;ID&quot; : &quot;000785.SZ&quot;, &quot;TrdDt&quot; : 20161129, &quot;TrdTm&quot; : 1500, &quot;PrevClsPx&quot; : 14.99, &quot;LastPx&quot; : 14.4, &quot;Real&quot; : true } { &quot;_id&quot; : ObjectId(&quot;583d27735868c24cb078e92a&quot;), &quot;Type&quot; : &quot;RSI&quot;, &quot;Sign&quot; : -1, &quot;ID&quot; : &quot;002117.SZ&quot;, &quot;TrdDt&quot; : 20161129, &quot;TrdTm&quot; : 1500, &quot;PrevClsPx&quot; : 29.88, &quot;LastPx&quot; : 29.84, &quot;Real&quot; : true } Type &quot;it&quot; for more testrs:PRIMARY&gt;_ 批量，修改一个key的value, 原value乘以100db.Signals_Day.update({TrdDt:20161129}, {$mul: {“TrdTm”:100}}, {multi: true} ) testrs:PRIMARY&gt; db.Signals_Day.update({TrdDt:20161129}, {$mul: {&quot;TrdTm&quot;:100}}, {multi: true} ) WriteResult({ &quot;nMatched&quot; : 8935, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 8935 }) testrs:PRIMARY&gt; db.Signals_Day.find({TrdDt:20161129}) ##]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux系列之端口与进程]]></title>
      <url>%2F2016%2F11%2F29%2Flinux-2%2F</url>
      <content type="text"><![CDATA[linux如何查看端口被哪个进程占用使用netstat 和lsof命令，并用grep来过滤你需要查看的端口。例如查看tcp有哪些端口打开了： netstat -a| grep tcp 然后查看哪个进程占用了这些端口： lsof -i 如果要查看某个端口，比如80端口是哪个进程： lsof -i | grep :80 如果说，tom用户查到了一些端口号被占用，但是，用lsof却查不到。怎么办？则要考虑，是不是端口被root用户占用，没有权限。所以要再一次用sudo lsof来查一查。 示例netstat -ant | grep 8060 ps -aux | grep node lsof -i:8060 man lsof lsof -i lsof -i -n lsof -iTCP sudo lsof -i]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git系列之gitlab安装]]></title>
      <url>%2F2016%2F11%2F28%2Fgit-3%2F</url>
      <content type="text"><![CDATA[参考https://gitlab.com/gitlab-org/gitlab-ce/tree/master 哈哈]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之MySQL查看用户权限]]></title>
      <url>%2F2016%2F11%2F25%2Fmysql-8%2F</url>
      <content type="text"><![CDATA[referencehttp://www.oschina.net/code/snippet_222150_12541 ## show grants for 你的用户;show grants for root@’localhost’;show grants for webgametest@10.3.18.158;show create database dbname; 这个可以看到创建数据库时用到的一些参数。show create table tickets; 可以看到创建表时用到的一些参数]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之navicat]]></title>
      <url>%2F2016%2F11%2F25%2Fmysql-7%2F</url>
      <content type="text"><![CDATA[referencehttp://blog.csdn.net/lwei_998/article/details/45560483 http://blog.csdn.net/moneyshi/article/details/50906650 http://mt.sohu.com/20160324/n441844650.shtml 导出连接设置Navicat 版本 81.选择文件 -&gt; 导出登录数据文件。导出的文件（.reg）包含你的全部连接设置。2.备份已导出的文件（.reg）。3.在现有的计算机解除安装 Navicat。4.在新的计算机重新安装 Navicat。5.在新的计算机运行已导出的文件（.reg）。 Navicat 版本 9 或以上1.在 Navicat，选择文件 -&gt; 导出连接。导出的文件（.ncx）包含你的全部连接设置。2.备份已导出的文件（.ncx）。3.在现有的计算机解除安装 Navicat。**4.在新的计算机重新安装 Navicat。5.在新的计算机打开 Navicat 和选择文件 -&gt; 导入连接。 ** 如果你使用版本 11 或以上，请在解除安装 Navicat 前取消激活注册码。 当创建一个新的连接，Navicat 将创建一个子文件夾（名为各数据库的名）在设置保存路径內。所有备份（.psc、.psb）、报表（.rtm）、查询（.sql）、导入/导出设置文件等都是保存在该子文件夾。要查找路径，你可以右击连接，然后选择连接属性 -&gt; 高级 -&gt; 设置保存路径/设置位置。 此外，全部已保存的设置文件（批处理作业设置文件）会保存在 profiles 文件夾。要查找路径，选择工具 -&gt; 选项 -&gt; 其他 -&gt; 设置文件保存路径/设置文件位置。 异常收集之：navicatdesignquery.sql.bak 系统找不到指定路径今天使用Navicat ，其他功能都正常，但是新建查询的时候，出现一个很奇葩的问题 C:\Program Files (x86)\PremiumSoft\Navicat for MySQL8.1/_NAVICAT_DESIGNQUERY.sql.bak 系统找不到指定路径 找了半天找不到解决办法，下载navicat 11都没用， 更改版本也没用。 最后发现，navicat 的每个连接，有个连接属性 具体操作：在连接—属性—高级。修改一下路径，改成你现在安装的navicat目录就好了 如何迁移 Navicat 到新的计算机迁移Navicat到新的计算机的步骤： 1. 选择文件-&gt;导出连接。导出的文件（.ncx）包含了全部连接设置内容。 2. 备份已导出的文件（.ncx）。 3. 在Navicat，选择帮助-&gt;注册，并点击“取消激活”来在线取消激活Navicat注册码。 4. 在现有的计算机解除安装Navicat。 5. 在新的计算机重新安装Navicat。 6. 在新的计算机中，打开Navicat，选择文件-&gt;导入连接。 当创建一个新的连接，Navicat将在设置位置创建一个子文件夹。大多数文件都保存在该子文件夹，右击选择属性-&gt;打开文件位置可查找路径。 此外，全部已保存的设置文件会保存在Profiles文件夹，选择工具-&gt;选项-&gt;其他-&gt;文件位置，即可查找存储路径。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mongodb系列之distinct]]></title>
      <url>%2F2016%2F11%2F25%2Fmongodb-2%2F</url>
      <content type="text"><![CDATA[referencehttps://docs.mongodb.com/manual/reference/method/db.collection.distinct/ http://www.jb51.net/article/65929.htm destinct MongoDB的destinct命令是获取特定字段中不同值列表。该命令适用于普通字段，数组字段和数组内嵌文档. mongodb的distinct的语句： db.users.distinct(‘last_name’）; 等同于 SQL 语句: select DISTINCT last_name from users; 表示的是根据指定的字段返回不同的记录集。 如果，有相关的查询，则放在后面。 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“LastPx”, {“TrdDt”:20161101, “ID”: “600650.SH”}) [ 25.88, 25.89, 25.87, 25.86 ] testrs:PRIMARY&gt; 示例 db.KLine_1Min.distinct(“ID”).length 114db.KLine_1Min.distinct(“ID”) testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161102, “ID”: /^60.SH/, “TrdTm”:1441}).length 1081 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161101, “ID”: /^60.SH/, “TrdTm”:1441}).length 1109 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161103, “ID”: /^60.SH/, “TrdTm”:1441}).length 1083 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161031, “ID”: /^60.SH/, “TrdTm”:1441}).length 1107 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161025, “ID”: /^60.SH/, “TrdTm”:1441}).length 1077 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161025, “ID”: /^00.SZ/, “TrdTm”:1441}).length 1168 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161031, “ID”: /^00.SZ/, “TrdTm”:1441}).length 1271 testrs:PRIMARY&gt; db.KLine_1Min.distinct(“ID”, {“TrdDt”:20161101, “ID”: /^00.SZ/, “TrdTm”:1441}).length 1271 testrs:PRIMARY&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mongodb系列之findOneAndUpdate]]></title>
      <url>%2F2016%2F11%2F24%2Fmongodb-1%2F</url>
      <content type="text"><![CDATA[参考http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#findOneAndUpdate https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndUpdate/ 示例修改键（字段）的值,修改了{b:2} var MongoClient = require(&apos;mongodb&apos;).MongoClient; MongoClient.connect(&apos;mongodb://192.168.31.240:27017/test&apos;, function(err, db) { // Get the collection var col = db.collection(&apos;find_one_and_update&apos;); col.insertMany([{a:1, b:1}], {w:1}, function(err, r) { col.findOneAndUpdate({a:1} , {$set: {b:2}} , { upsert: true } , function(err, r) { db.close(); }); }); }); 增加新的键，增加了{d:1} var MongoClient = require(&apos;mongodb&apos;).MongoClient, test = require(&apos;assert&apos;); MongoClient.connect(&apos;mongodb://192.168.31.240:27017/test&apos;, function(err, db) { // Get the collection var col = db.collection(&apos;find_one_and_update&apos;); col.insertMany([{a:1, b:1}], {w:1}, function(err, r) { col.findOneAndUpdate({a:1} , {$set: {d:1}} , { upsert: true } , function(err, r) { db.close(); }); }); });]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mongodb系列之目录]]></title>
      <url>%2F2016%2F11%2F24%2Fmongodb%2F</url>
      <content type="text"><![CDATA[mongodb系列之目录 mongodb系列之distinct mongodb系列之findOneAndUpdate]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nodejs系列之npm的常用命令]]></title>
      <url>%2F2016%2F11%2F23%2Fnodejs-3nodejs%E7%B3%BB%E5%88%97%E4%B9%8Bnpm%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[参考http://www.jb51.net/article/52409.htm 要点分享几个npm的常用命令 npm -v #显示版本，检查npm 是否正确安装。 npm install express #安装express模块 npm install -g express #全局安装express模块 npm list #列出已安装模块 npm show express #显示模块详情 npm update #升级当前目录下的项目的所有模块 npm update express #升级当前目录下的项目的指定模块 npm update -g express #升级全局安装的express模块 npm uninstall express #删除指定的模块]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nodejs系列之使用n管理nodejs版本]]></title>
      <url>%2F2016%2F11%2F23%2Fnodejs-2nodejs%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BD%BF%E7%94%A8n%E7%AE%A1%E7%90%86nodejs%E7%89%88%E6%9C%AC%2F</url>
      <content type="text"><![CDATA[参考http://blog.csdn.net/jiangbo_phd/article/details/51476155 主要点npm -g XXX :安装的XXX软件，在linux下的目录 /usr/lib/node_modules/ sudo n :切换node版本 n 切换之后的 node 默认装在 /usr/local/bin/node，你最好用 which node 检查一下当前使用的 node 是否是这个路径下的。 问题 如果安装过程中因为某原因（主要是网络原因），未安装成功，则删除对应的目录，重新安装就可以了。 tom@adata:~/Projects/OpenX/lib$ sudo n latest [sudo] password for tom: install : node-v7.2.0 mkdir : /usr/local/n/versions/node/7.2.0 fetch : https://nodejs.org/dist/v7.2.0/node-v7.2.0-linux-x64.tar.gz ###################################################### 75.1% curl: (56) GnuTLS recv error (-54): Error in the pull function. gzip: stdin: unexpected end of file tar: Unexpected EOF in archive tar: Unexpected EOF in archive tar: Error is not recoverable: exiting now cp: cannot stat ‘/usr/local/n/versions/node/7.2.0/lib’: No such file or directory cp: cannot stat ‘/usr/local/n/versions/node/7.2.0/include’: No such file or directory cp: cannot stat ‘/usr/local/n/versions/node/7.2.0/share’: No such file or directory installed : v7.2.0 tom@adata:~/Projects/OpenX/lib$ ll /usr/local/n/versions/node/7.2.0/ total 12 drwxr-xr-x 3 root root 4096 11月 23 13:07 ./ drwxr-xr-x 4 root root 4096 11月 23 13:00 ../ drwxrwxr-x 2 500 500 4096 11月 23 06:35 bin/ tom@adata:~/Projects/OpenX/lib$ sudo n latest [sudo] password for tom: tom@adata:~/Projects/OpenX/lib$ sudo n latest tom@adata:~/Projects/OpenX/lib$ sudo rm -rf /usr/local/n/versions/node/7.2.0/ tom@adata:~/Projects/OpenX/lib$ sudo n latest install : node-v7.2.0 mkdir : /usr/local/n/versions/node/7.2.0 fetch : https://nodejs.org/dist/v7.2.0/node-v7.2.0-linux-x64.tar.gz ######################################################################## 100.0% installed : v7.2.0 tom@adata:~/Projects/OpenX/lib$ 安装完成后，不要直接看node版本，另开一个terminal，查看。 tom@adata:~/Projects/OpenX/lib$ node -v v6.7.0 tom@adata:~/Projects/OpenX/lib$ 看吧，上面这个明显还是老版本。另开一个terminal，查看就是新版本了。 实战[jlch@kube-node-15 ~]$ sudo npm i n -g [sudo] password for jlch: /usr/bin/n -&gt; /usr/lib/node_modules/n/bin/n n@2.1.4 /usr/lib/node_modules/n [jlch@kube-node-15 ~]$ ll /usr/lib/node_modules/ # 看一下，n是不是真的安装成功 total 8 drwxr-xr-x. 3 nobody jlch 66 11月 23 14:08 n drwxr-xr-x. 9 root root 4096 6月 8 16:05 npm drwxr-xr-x. 5 nobody jlch 4096 6月 8 18:00 pm2 [jlch@kube-node-15 ~]$ sudo n --help # 找帮助 Usage: n [options/env] [COMMAND] [args] Environments: n [COMMAND] [args] Uses default env (node) n io [COMMAND] Sets env as io n project [COMMAND] Uses custom env-variables to use non-official sources Commands: n Output versions installed n latest Install or activate the latest node release n -a x86 latest As above but force 32 bit architecture n stable Install or activate the latest stable node release n lts Install or activate the latest LTS node release n &lt;version&gt; Install node &lt;version&gt; n use &lt;version&gt; [args ...] Execute node &lt;version&gt; with [args ...] n bin &lt;version&gt; Output bin path for &lt;version&gt; n rm &lt;version ...&gt; Remove the given version(s) n --latest Output the latest node version available n --stable Output the latest stable node version available n --lts Output the latest LTS node version available n ls Output the versions of node available (iojs): n io latest Install or activate the latest iojs release n io -a x86 latest As above but force 32 bit architecture n io &lt;version&gt; Install iojs &lt;version&gt; n io use &lt;version&gt; [args ...] Execute iojs &lt;version&gt; with [args ...] n io bin &lt;version&gt; Output bin path for &lt;version&gt; n io rm &lt;version ...&gt; Remove the given version(s) n io --latest Output the latest iojs version available n io ls Output the versions of iojs available Options: -V, --version Output current version of n -h, --help Display help information -q, --quiet Disable curl output (if available) -d, --download Download only -a, --arch Override system architecture Aliases: which bin use as list ls - rm [jlch@kube-node-15 ~]$ sudo n --version 2.1.3 [jlch@kube-node-15 ~]$ node -v v4.4.5 [jlch@kube-node-15 ~]$ sudo n 4.4.6 install : node-v4.4.6 mkdir : /usr/local/n/versions/node/4.4.6 fetch : https://nodejs.org/dist/v4.4.6/node-v4.4.6-linux-x64.tar.gz ################## 26.0% 查一下，各自的路径 tom@adata:~/m6s/blogs/tomtsang$ which node /usr/local/bin/node tom@adata:~/m6s/blogs/tomtsang$ which n /usr/bin/n tom@adata:~/m6s/blogs/tomtsang$ 切换着玩一下。 tom@adata:~/Projects/OpenX/lib$ node -v v6.9.1 tom@adata:~/Projects/OpenX/lib$ sudo n [sudo] password for tom: tom@adata:~/Projects/OpenX/lib$ node -v v7.2.0 tom@adata:~/Projects/OpenX/lib$ sudo n tom@adata:~/Projects/OpenX/lib$ node -v v6.9.1 tom@adata:~/Projects/OpenX/lib$]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nodejs系列之toFixed]]></title>
      <url>%2F2016%2F11%2F23%2Fnodejs-1nodejs%E7%B3%BB%E5%88%97%E4%B9%8BtoFixed%2F</url>
      <content type="text"><![CDATA[在遇到，4147.8015这样的浮点数时的，toFixed()的替代方案。 通过下面这一段，应该知道，这里的toFixed2 中的 “9”（是可以设置成限定的位数的准确度的，不应该设置成“2”，“2”太小了，是有问题的，所以设置成大数“9”）。 tom@adata:~/m6s/nodejs/module/toFixed$ node &gt; var aux = Math.pow(0.1, 1 + 2) undefined &gt; var number = 14.44999 undefined &gt; number + aux 14.45099 &gt; (number + aux).toFixed(1) &apos;14.5&apos; 下面，直接上代码吧。共2个js文件。写法不同，意思相同。 toFixedTest1.js module.exports.MathHelper = MathHelper; var MathHelper = (function() { this.round = function(number, numberOfDecimals) { var aux = Math.pow(10, numberOfDecimals); return Math.round(number * aux) / aux; }; this.floor = function(number, numberOfDecimals) { var aux = Math.pow(10, numberOfDecimals); return Math.floor(number * aux) / aux; }; this.ceil = function(number, numberOfDecimals) { var aux = Math.pow(10, numberOfDecimals); return Math.ceil(number * aux) / aux; }; this.toFixed = function(number, numberOfDecimals) { return (number + 0.000001).toFixed(numberOfDecimals); }; this.toFixed2 = function(number, numberOfDecimals) { var aux = Math.pow(0.1, numberOfDecimals + 9); // 这里的这个9,只是让它小一点，再小一点。 return (number + aux).toFixed(numberOfDecimals); }; this.toFixed3 = function(number, numberOfDecimals) { var aux = Math.pow(0.1, numberOfDecimals); console.log(&quot;aux =&gt;&quot;, aux); return (number + aux).toFixed(numberOfDecimals); }; return { round: round, floor: floor, ceil: ceil, toFixed: toFixed, toFixed2: toFixed2, toFixed3: round }; })(); var ToFixedHelper = (function() { this.toFixed = function(number, numberOfDecimals) { var aux = Math.pow(0.1, numberOfDecimals); return (number + aux).toFixed(numberOfDecimals); }; return { toFixed: toFixed } })(); console.log(MathHelper.round(5.175, 2)); console.log(MathHelper.toFixed(5.175, 2)); console.log(MathHelper.toFixed(4147.8015, 3)); console.log(MathHelper.toFixed2(4147.8015, 3)); console.log(ToFixedHelper.toFixed(4147.8015, 3)); var number = 4147.8015; var num = 10000; console.time(&quot;toFixed&quot;); for (var i = 0; i &lt; num; i++) { number.toFixed(3); } console.timeEnd(&quot;toFixed&quot;); console.time(&quot;toFixed1&quot;); for (var i = 0; i &lt; num; i++) { MathHelper.toFixed(number, 3); } console.timeEnd(&quot;toFixed1&quot;); console.time(&quot;toFixed2&quot;); for (var i = 0; i &lt; num; i++) { MathHelper.toFixed2(number, 3); } console.timeEnd(&quot;toFixed2&quot;); toFixedTest2.js var MathHelper = { toFixed : function(number, numberOfDecimals) { // var aux = Math.pow(0.1, numberOfDecimals + 2) + Math.pow(0.1, numberOfDecimals + 1); var aux = 0.000001; // Math.pow(0.1, numberOfDecimals + 2); return (number + aux).toFixed(numberOfDecimals); }, toFixed2 : function(number, numberOfDecimals) { // var aux = Math.pow(0.1, numberOfDecimals + 2) + Math.pow(0.1, numberOfDecimals + 1); var aux = Math.pow(0.1, numberOfDecimals + 9); return (number + aux).toFixed(numberOfDecimals); } }; console.log(MathHelper.toFixed(5.175, 2)); console.log(5.175.toFixed(2)); console.log(MathHelper.toFixed(4147.8015, 3)); console.log(4147.8015.toFixed(3)); console.log(MathHelper.toFixed(14.499, 1)); console.log(14.499.toFixed(1)); console.log(14.44999.toFixed(1)); console.log(MathHelper.toFixed(14.44999, 1)); console.log(MathHelper.toFixed2(14.44999, 1)); var number = 4147.8015; var num = 10000; console.time(&quot;toFixed&quot;); for (var i = 0; i &lt; num; i++) { number.toFixed(3); } console.timeEnd(&quot;toFixed&quot;); console.time(&quot;toFixed1&quot;); for (var i = 0; i &lt; num; i++) { MathHelper.toFixed(number, 3); } console.timeEnd(&quot;toFixed1&quot;); console.time(&quot;toFixed1&quot;); for (var i = 0; i &lt; num; i++) { MathHelper.toFixed(number, 3); } console.timeEnd(&quot;toFixed1&quot;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nodejs系列之]]></title>
      <url>%2F2016%2F11%2F23%2Fnodejs%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[git系列之使用]]></title>
      <url>%2F2016%2F11%2F19%2Fgit-2%2F</url>
      <content type="text"><![CDATA[git reset –hard commit_idGit允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id 去除对 已添加的文件或文件夹 的跟踪git rm -r --cached -- .idea/ 这样呢，文件夹里 .idea/ 的修改，git都不跟踪了。 git rm -r --cached -- node_modules/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git系列之从外部复制一个.git文件，如何使用]]></title>
      <url>%2F2016%2F11%2F19%2Fgit-1git%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BB%8E%E5%A4%96%E9%83%A8%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA.git%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[从外部复制一个.git文件，如何使用 问题有.git 文件 ，直接使用，报错如下： fatal: &apos;/srv/OpenX.git&apos; does not appear to be a git repository fatal: Could not read from remote repository. 现在有一个新来的.git文件, 如：OpenX.git 放到本机的git仓库目录 [tom@check repositories]$ sudo cp -a OpenX.git/ /srv/ 建立新的下传使用目录 [tom@check repositories]$ cd ../testgit/ [tom@check testgit]$ mkdir testgit2 [tom@check testgit]$ ls OpenXtest testgit2 [tom@check testgit]$ cd testgit2/ [tom@check testgit2]$ git init Initialized empty Git repository in /home/tom/in/testgit/testgit2/.git/ 下传pull remote报错啦 [tom@check testgit2]$ git remote add checkgit git@192.168.31.181:/srv/OpenX.git [tom@check testgit2]$ git pull checkgit master git@192.168.31.181&apos;s password: fatal: &apos;/srv/OpenX.git&apos; does not appear to be a git repository fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. [tom@check testgit2]$ clone也是会报错哟 [tom@check testgit2]$ git clone git@192.168.31.181:/srv/OpenX.git Cloning into &apos;OpenX&apos;... git@192.168.31.181&apos;s password: fatal: &apos;/srv/OpenX.git&apos; does not appear to be a git repository fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. [tom@check testgit2]$ 解决 查看文件属性 [tom@check testgit2]$ ll /srv/ total 0 drwxr-xr-x 7 git git 111 Jan 19 18:13 conan.git drwxr-xr-x 7 git git 111 Jan 11 10:52 crawler.git drwxr-xr-x 7 git git 111 Jan 8 16:19 eastmoney.git drwx------ 7 tom tom 107 Feb 28 08:59 OpenX.git drwxr-xr-x 7 git git 111 Jan 19 11:18 qlw.git drwxr-xr-x 7 git git 111 Jan 6 15:03 sample.git [tom@check testgit2]$ 发现OpenX.git 属性不对. 检查是否安装git,并有git用户。如果没有，则建立git账户和密码修改 OpenX.git 属性 [tom@check testgit2]$ sudo chown -R git:git /srv/OpenX.git/ [tom@check testgit2]$ sudo chmod -R 755 /srv/OpenX.git/ [tom@check testgit2]$ ll /srv/ total 0 drwxr-xr-x 7 git git 111 Jan 19 18:13 conan.git drwxr-xr-x 7 git git 111 Jan 11 10:52 crawler.git drwxr-xr-x 7 git git 111 Jan 8 16:19 eastmoney.git drwxr-xr-x 7 git git 107 Feb 28 08:59 OpenX.git drwxr-xr-x 7 git git 111 Jan 19 11:18 qlw.git drwxr-xr-x 7 git git 111 Jan 6 15:03 sample.git [tom@check testgit2]$ 验收 [tom@check testgit2]$ git remote add checkgit git@192.168.31.181:/srv/OpenX.git fatal: remote checkgit already exists. [tom@check testgit2]$ git pull checkgit master git@192.168.31.181&apos;s password: remote: Counting objects: 1673, done. remote: Compressing objects: 100% (1637/1637), done. remote: Total 1673 (delta 928), reused 76 (delta 32) Receiving objects: 100% (1673/1673), 6.90 MiB | 7.48 MiB/s, done. Resolving deltas: 100% (928/928), done. From 192.168.31.181:/srv/OpenX * branch master -&gt; FETCH_HEAD [tom@check testgit2]$ ls lib OpenInfo OpenQuote [tom@check testgit2]$]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git系列之目录]]></title>
      <url>%2F2016%2F11%2F19%2Fgit%2F</url>
      <content type="text"><![CDATA[git系列之目录]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo系列之使用1]]></title>
      <url>%2F2016%2F11%2F19%2Fhexo-1%2F</url>
      <content type="text"><![CDATA[hexo下新建页面下如何放多个文章？https://www.zhihu.com/question/33324071 hexo分类与tags配置Hexo中如何给一篇文章加多个tags？下面2种方式： tags: [a,b,c] # 冒号后有一个空格 tags: - tag1 - tag2 可以做到自动增加哟。tom@adata:~/m6s/blogs/tomtsang$ hexo n &quot;mysql-21&quot; INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-21.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &quot;mysql&quot; INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-22.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &quot;mysql&quot; INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-23.md_ 这样的话，方便形成系列的文章。每次就不用管是第几个mysql系列文章了。不过系列文章，最好用的，还是 categories 可以用自定义的post:tom@adata:~/m6s/blogs/tomtsang$ hexo n &quot;mysql&quot; [mysql] INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-4.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &quot;mysql&quot; [mysql] INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-5.md tom@adata:~/m6s/blogs/tomtsang$ hexo n &quot;mysql&quot; [mysql] INFO Created: ~/m6s/blogs/tomtsang/source/_posts/mysql-1.md_ end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo系列之目录]]></title>
      <url>%2F2016%2F11%2F19%2Fhexo%2F</url>
      <content type="text"><![CDATA[hexo 系列之目录]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux系列之目录]]></title>
      <url>%2F2016%2F11%2F19%2Flinux%2F</url>
      <content type="text"><![CDATA[linux系列之目录]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之集群 MariaDB Galera Cluster 部署]]></title>
      <url>%2F2016%2F11%2F17%2Fmysql-4mysql%E7%B3%BB%E5%88%97%E4%B9%8B%E9%9B%86%E7%BE%A4%20MariaDB%20Galera%20Cluster%20%E9%83%A8%E7%BD%B2%2F</url>
      <content type="text"><![CDATA[参考How To Setup MariaDB Galera Cluster 10.0 On CentOShttp://www.unixmen.com/setup-mariadb-galera-cluster-10-0-centos/ 安装 过程MariaDB is a relational database management system (RDBMS) and MariaDB Galera Cluster is a synchronous multi-master cluster for MariaDB. It is available on Linux only, and only supports the XtraDB/InnoDB storage engines. This article explains how to setup MariaDB Galera Cluster 10.0 with 3 nodes running on CentOS 6.5(tom注：在CentOS 7.0上也成功) x86_64 resulting in a HA (high-availability) database cluster. CLUSTER DETAILSWe using 3 freshly deployed VMs running a minimal install of CentOS 6.5 x86_64. Cluster node 1 has hostname db1 and IP address 1.1.1.1 Cluster node 2 has hostname db2 and IP address 1.1.1.2 Cluster node 3 has hostname db3 and IP address 1.1.1.3 Step 1: Add MariaDB RepositoriesCreate a mariadb repository /etc/yum.repos.d/mariadb.repo using following content in your system. For CentOS 7 – 64bit: [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 For CentOS 7 – 32bit: [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos7-x86 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 Step 2 – Set SELinux in permissive modeBefore starting the setup put SELinux into permissive mode on all nodes: sudo setenforce 0 Step 3 – Install MariaDB Galera Cluster 10.0 softwareIf you did a CentOS 6 minimal installation then make sure you install the socat package from the EPEL repository before proceeding with installing the MariaDB Galera Cluster 10.0 software. You can install socat package directly from EPEL with the following command (for x86_64): sudo yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/socat-1.7.2.3-1.el6.x86_64.rpm On CentOS 7 you can install socat package with following command. sudo yum install socat -y Install the MariaDB Galera Cluster 10.0 software by executing the following command on all nodes: sudo yum install MariaDB-Galera-server MariaDB-client rsync galera -y 如果说，这一步没有安装成功，请参考之前的那一篇mysql系列之集群 MariaDB-Galera-server 安装 Step 4: Setup MariaDB securityStart the mysql ( init script in MariaDB 10.0 is still called mysql) sudo service mysql start Run the mysql_secure_installation script so we can improve the security. Run the following command on all nodes: sudo /usr/bin/mysql_secure_installation I choose password as ‘dbpass’ and accepted all defaults (so answered yes to all questions). Step 5 – Create MariaDB Galera Cluster usersNow, we have to create some users that must be able to access the database. The ‘sst_user’ is the user which a database node will use for authenticating to another database node in the State Transfer Snapshot (SST) phase. Run the following command on all nodes: mysql -u root -p mysql&gt; DELETE FROM mysql.user WHERE user=&apos;&apos;; mysql&gt; GRANT ALL ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;dbpass&apos;; mysql&gt; GRANT USAGE ON *.* to sst_user@&apos;%&apos; IDENTIFIED BY &apos;dbpass&apos;; mysql&gt; GRANT ALL PRIVILEGES on *.* to sst_user@&apos;%&apos;; mysql&gt; FLUSH PRIVILEGES; mysql&gt; quit You are suggested to change ‘%’ to hostname(s) or IP addresses from which those users can access the database. Because ‘%’ means that the root or sst_user is allowed to access the database from any host, So less security. Step 6 – Create the MariaDB Galera Cluster configFirst stop the mysql services on all nodes: sudo service mysql stop Next, We are going to create the MariaDB Galera Cluster configuration by the following command on all nodes (go through the IMPORTANT NOTE after the config and make required changes for db2, and db3): sudo cat &gt;&gt; /etc/my.cnf.d/server.cnf &lt;&lt; EOF [mariadb-10.0] binlog_format=ROW default-storage-engine=innodb innodb_autoinc_lock_mode=2 innodb_locks_unsafe_for_binlog=1 query_cache_size=0 query_cache_type=0 bind-address=0.0.0.0 datadir=/var/lib/mysql innodb_log_file_size=100M innodb_file_per_table innodb_flush_log_at_trx_commit=2 wsrep_provider=/usr/lib64/galera/libgalera_smm.so wsrep_cluster_address=&quot;gcomm://1.1.1.1,1.1.1.2,1.1.1.3&quot; wsrep_cluster_name=&apos;galera_cluster&apos; wsrep_node_address=&apos;1.1.1.1&apos; wsrep_node_name=&apos;db1&apos; wsrep_sst_method=rsync wsrep_sst_auth=sst_user:dbpass EOF IMPORTANT NOTE: when executing this command on db2 and db3 do not forget to adjust the wsrep_node_address and wsrep_node_name variables. On db2 : wsrep_node_address=1.1.1.2 wsrep_node_name=&apos;db2&apos; On db3 : wsrep_node_address=&apos;1.1.1.3&apos; wsrep_node_name=&apos;db3&apos; Step 7– Initialize the first cluster nodeStart MariaDB with the special ‘‐‐wsrep-new-cluster’ option , Do it on node db1 only so the primary node of the cluster is initialized: sudo /etc/init.d/mysql start --wsrep-new-cluster Check status by run the following command on node db1 only: mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;;&quot; Some important information in the output are the following lines: wsrep_local_state_comment | Synced &lt;-- cluster is synced wsrep_incoming_addresses | 1.1.1.1:3306 &lt;-- node db1 is a provider wsrep_cluster_size | 1 &lt;-- cluster consists of 1 node wsrep_ready | ON &lt;-- good :) 如果说这里报错了，请参考mysql系列之集群 MariaDB-Galera-cluster 报错 Step 8– Add the other cluster nodesCheck and confirm nodes db2 and db3 have the correct configuration in /etc/my.cnf.d/server.cnf under the [mariadb-10.0] as described in step 6. With the correct configuration in place, all that is required to make db2 and db3 a member of the cluster is to start them like you would start any regular service. On db2 issue the following command: sudo service mysql start Check what has changed in the cluster status by executing the following command on db1 or db2: mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;;&quot; And you will see that node db2 is now known as the cluster size is ‘2’ and the IP address of node db2 is listed: | wsrep_local_state_comment | Synced | | wsrep_incoming_addre sses | 1.1.1.1:3306,1.1.1.2:3306 | | wsrep_cluster_size | 2 | | wsrep_connected | ON | | wsrep_ready | ON | Repeat the same step for node db3. On node db3 only execute the following command sudo service mysql start Check what has changed in the cluster status by executing the following command on for example db1: mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;;&quot; And you should see that node db3 is now known as the cluster size is ‘3’ and the IP address of node db3 is listed: | wsrep_local_state_comment | Synced | | wsrep_incoming_addresses | 1.1.1.3:3306,1.1.1.1:3306,1.1.1.2:3306 | | wsrep_cluster_size | 3 | | wsrep_connected | ON | | wsrep_ready | ON | Step 9 – Verify replicationNow the cluster is running. Let’s test whether it is working. On db1 create a database ‘clustertest’ by run the following command: mysql -u root -p -e &apos;CREATE DATABASE clustertest;&apos; mysql -u root -p -e &apos;CREATE TABLE clustertest.mycluster ( id INT NOT NULL AUTO_INCREMENT, name VARCHAR(50), ipaddress VARCHAR(20), PRIMARY KEY(id));&apos; mysql -u root -p -e &apos;INSERT INTO clustertest.mycluster (name, ipaddress) VALUES (&quot;db1&quot;, &quot;1.1.1.1&quot;);&apos; Check if the database, table and data exists: mysql -u root -p -e &apos;SELECT * FROM clustertest.mycluster;&apos; Enter password: +----+------+-----------+ | id | name | ipaddress | +----+------+-----------+ | 2 | db1 | 1.1.1.1 | +----+------+-----------+ Now do the check on node db2: mysql -u root -p -e &apos;SELECT * FROM clustertest.mycluster;&apos; Enter password: +----+------+-----------+ | id | name | ipaddress | +----+------+-----------+ | 2 | db1 | 1.1.1.1 | +----+------+-----------+ Now do the same check on node db3: mysql -u root -p -e &apos;SELECT * FROM clustertest.mycluster;&apos; Enter password: +----+------+-----------+ | id | name | ipaddress | +----+------+-----------+ | 2 | db1 | 1.1.1.1 | +----+------+-----------+ From these outputs we can confirm that everything was successfully replicated by node db1 across all other nodes. That’s it. Cheers! ctrl + v 吧sudo vi /etc/hosts 10.10.162.11 db1 10.10.162.12 db2 10.10.162.13 db3 sudo vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.1 CentOS repository list - created 2016-11-15 02:38 UTC # http://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 sudo setenforce 0 sudo yum install socat -y sudo yum install socat MariaDB-Galera-server MariaDB-client rsync galera -y sudo service mysql start sudo /usr/bin/mysql_secure_installation mysql -u root -p sudo service mysql stop sudo cat &gt;&gt; /etc/my.cnf.d/server.cnf &lt;&lt; EOF binlog_format=ROW default-storage-engine=innodb innodb_autoinc_lock_mode=2 innodb_locks_unsafe_for_binlog=1 query_cache_size=0 query_cache_type=0 bind-address=0.0.0.0 datadir=/var/lib/mysql innodb_log_file_size=100M innodb_file_per_table innodb_flush_log_at_trx_commit=2 wsrep_provider=/usr/lib64/galera/libgalera_smm.so wsrep_cluster_address=&quot;gcomm://1.1.1.1,1.1.1.2,1.1.1.3&quot; wsrep_cluster_name=&apos;galera_cluster&apos; wsrep_node_address=&apos;1.1.1.1&apos; wsrep_node_name=&apos;db1&apos; wsrep_sst_method=rsync wsrep_sst_auth=sst_user:dbpass EOF # 上面这个好像会出错，算了，我们 sudo vi 吧 sudo vi /etc/my.cnf.d/server.cnf sudo cp -a /etc/my.cnf.d/server.cnf . ls sudo cp -a server.cnf server.cnf.12 sudo cp -a server.cnf server.cnf.13 sudo vi server.cnf.12 sudo vi server.cnf.13 scp server.cnf.12 spa@s12:/home/spa/ # 之后在spa@s12中改一改吧。 scp server.cnf.13 spa@s13:/home/spa/ # 好了，现在三台机器的配置都完成啦！ sudo /etc/init.d/mysql start --wsrep-new-cluster mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;;&quot; # 好了，如果没有问题，我们把其它2台机器也启动下。 sudo service mysql start; sudo service mysql status; mysql -u root -p -e &apos;CREATE DATABASE clustertest;&apos; mysql -u root -p -e &apos;CREATE TABLE clustertest.mycluster ( id INT NOT NULL AUTO_INCREMENT, name VARCHAR(50), ipaddress VARCHAR(20), PRIMARY KEY(id));&apos; mysql -u root -p -e &apos;INSERT INTO clustertest.mycluster (name, ipaddress) VALUES (&quot;db1&quot;, &quot;1.1.1.1&quot;);&apos; mysql -u root -p -e &apos;SELECT * FROM clustertest.mycluster;&apos; # 到其它2台机器上也查一下吧。 mysql -u root -p -e &apos;SELECT * FROM clustertest.mycluster;&apos; # 如果其它机器也显示出来了，那就Cheers!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之集群 MariaDB-Galera-cluster 报错]]></title>
      <url>%2F2016%2F11%2F17%2Fmysql-5mysql%E7%B3%BB%E5%88%97%E4%B9%8B%E9%9B%86%E7%BE%A4%20MariaDB-Galera-cluster%20%E6%8A%A5%E9%94%99%2F</url>
      <content type="text"><![CDATA[报错1, /etc/my.cnf.d/下 有一个 不应该存在的 .cnf错误原因： mysql 加载了 /etc/my.cnf.d/下的所有 *.cnf 文件，其中又有一个之前的不应该存在的 *.cnf。 正确情况下，应该只有4个.cnf文件。 [spa@s11 ~]$ ls /etc/my.cnf.d/ client.cnf mysql-clients.cnf server.cnf tokudb.cnf [spa@s11 ~]$ 错误情况： [tom@kube-node-13 ~]$ sudo /etc/init.d/mysql start --wsrep-new-cluster Starting MySQL.161116 17:44:54 mysqld_safe Logging to &apos;/data/mariadb/mysql/kube-node-13.err&apos;. . SUCCESS! [tom@kube-node-13 ~]$ mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;&quot; Enter password: +--------------------------+----------------------+ | Variable_name | Value | +--------------------------+----------------------+ | wsrep_cluster_conf_id | 18446744073709551615 | | wsrep_cluster_size | 0 | | wsrep_cluster_state_uuid | | | wsrep_cluster_status | Disconnected | | wsrep_connected | OFF | | wsrep_local_bf_aborts | 0 | | wsrep_local_index | 18446744073709551615 | | wsrep_provider_name | | | wsrep_provider_vendor | | | wsrep_provider_version | | | wsrep_ready | ON | | wsrep_thread_count | 0 | +--------------------------+----------------------+ [tom@kube-node-13 ~]$ 解决过程： 怎么办呢？ 先看状态 [tom@kube-node-13 ~]$ sudo service mysql status -l SUCCESS! MySQL running (11946) 关闭掉，我们来手动启动查原因。 [tom@kube-node-13 ~]$ sudo service mysql stop Shutting down MySQL... SUCCESS! [tom@kube-node-13 ~]$ 查一下，如何手动启动 [spa@s11 ~]$ which mysqld /usr/sbin/mysqld [cdn@test_240 OpenPicker]$ mysqld --help mysqld Ver 10.0.28-MariaDB-wsrep for Linux on x86_64 (MariaDB Server, wsrep_25.16.rc3fc46e) Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others. Starts the MariaDB database server. Usage: mysqld [OPTIONS] For more help options (several pages), use mysqld --verbose --help. [cdn@test_240 OpenPicker]$ use mysqld --verbose --help ... 一大串 ... 手动启动 [tom@kube-node-13 ~]$ mysqld --verbose 161116 18:30:01 [Note] mysqld (mysqld 10.0.28-MariaDB-wsrep) starting as process 12713 ... 161116 18:30:01 [Warning] Can&apos;t create test file /data/mariadb/mysql/kube-node-13.lower-test 161116 18:30:01 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 18:30:01 [Note] WSREP: wsrep_load(): loading provider library &apos;/usr/lib/galera/libgalera_smm.so&apos; 161116 18:30:01 [ERROR] WSREP: wsrep_load(): dlopen(): /usr/lib/galera/libgalera_smm.so: cannot open shared object file: No such file or directory 161116 18:30:01 [ERROR] WSREP: wsrep_load(/usr/lib/galera/libgalera_smm.so) failed: Invalid argument (22). Reverting to no provider. 161116 18:30:01 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 18:30:01 [Note] WSREP: wsrep_load(): loading provider library &apos;none&apos; 2016-11-16 18:30:01 7f1069f42880 InnoDB: Warning: Using innodb_locks_unsafe_for_binlog is DEPRECATED. This option may be removed in future releases. Please use READ COMMITTED transaction isolation level instead, see http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html. 161116 18:30:01 [Note] InnoDB: Using mutexes to ref count buffer pool pages 161116 18:30:01 [Note] InnoDB: The InnoDB memory heap is disabled 161116 18:30:01 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins 161116 18:30:01 [Note] InnoDB: GCC builtin __atomic_thread_fence() is used for memory barrier 161116 18:30:01 [Note] InnoDB: Compressed tables use zlib 1.2.7 161116 18:30:01 [Note] InnoDB: Using Linux native AIO 161116 18:30:01 [Note] InnoDB: Using CPU crc32 instructions 161116 18:30:01 [Note] InnoDB: Initializing buffer pool, size = 128.0M 161116 18:30:01 [Note] InnoDB: Completed initialization of buffer pool 161116 18:30:01 [ERROR] InnoDB: ./ibdata1 can&apos;t be opened in read-write mode 161116 18:30:01 [ERROR] InnoDB: The system tablespace must be writable! 161116 18:30:01 [ERROR] Plugin &apos;InnoDB&apos; init function returned error. 161116 18:30:01 [ERROR] Plugin &apos;InnoDB&apos; registration as a STORAGE ENGINE failed. 161116 18:30:01 [ERROR] mysqld: File &apos;/data/mariadb/mysql/aria_log_control&apos; not found (Errcode: 13 &quot;Permission denied&quot;) 161116 18:30:01 [ERROR] mysqld: Got error &apos;Can&apos;t open file&apos; when trying to use aria control file &apos;/data/mariadb/mysql/aria_log_control&apos; 161116 18:30:01 [ERROR] Plugin &apos;Aria&apos; init function returned error. 161116 18:30:01 [ERROR] Plugin &apos;Aria&apos; registration as a STORAGE ENGINE failed. 161116 18:30:01 [Note] Plugin &apos;FEEDBACK&apos; is disabled. 161116 18:30:01 [ERROR] Can&apos;t open the mysql.plugin table. Please run mysql_upgrade to create it. 161116 18:30:01 [ERROR] Unknown/unsupported storage engine: innodb 161116 18:30:01 [ERROR] Aborting 161116 18:30:01 [Note] WSREP: Service disconnected. 161116 18:30:02 [Note] WSREP: Some threads may fail to exit. 161116 18:30:02 [Note] mysqld: Shutdown complete 看到了吧，上面有一行 161116 18:30:01 [ERROR] WSREP: wsrep_load(): dlopen(): /usr/lib/galera/libgalera_smm.so: cannot open shared object file: No such file or directory 说明有问题了吧。先这样，我们确保一下，启动程序的用户是mysql,来吧。 [tom@kube-node-13 ~]$ sudo --help sudo: invalid option -- &apos;-&apos; usage: sudo [-D level] -h | -K | -k | -V usage: sudo -v [-AknS] [-D level] [-g groupname|#gid] [-p prompt] [-u user name|#uid] usage: sudo -l[l] [-AknS] [-D level] [-g groupname|#gid] [-p prompt] [-U user name] [-u user name|#uid] [-g groupname|#gid] [command] usage: sudo [-AbEHknPS] [-r role] [-t type] [-C fd] [-D level] [-g groupname|#gid] [-p prompt] [-u user name|#uid] [-g groupname|#gid] [VAR=value] [-i|-s] [&lt;command&gt;] usage: sudo -e [-AknS] [-r role] [-t type] [-C fd] [-D level] [-g groupname|#gid] [-p prompt] [-u user name|#uid] file ... [tom@kube-node-13 ~]$ 好了，知道了，用sudo -u ,那这个 -u 后面接什么用户呢？mysql ,还是 mysqld？ [tom@kube-node-13 ~]$ ll /var/lib/mysql/ total 217128 -rw-rw----. 1 mysql mysql 16384 11月 16 18:18 aria_log.00000001 -rw-rw----. 1 mysql mysql 52 11月 16 18:18 aria_log_control -rw-rw----. 1 mysql mysql 12582912 11月 16 18:18 ibdata1 -rw-rw----. 1 mysql mysql 104857600 11月 16 18:18 ib_logfile0 -rw-rw----. 1 mysql mysql 104857600 11月 16 18:18 ib_logfile1 -rw-r-----. 1 mysql root 5489 11月 16 18:18 kube-node-13.err -rw-rw----. 1 mysql mysql 0 11月 16 13:34 multi-master.info drwx--x--x. 2 mysql mysql 4096 11月 16 12:51 mysql srwxrwxrwx. 1 mysql mysql 0 11月 17 10:28 mysql.sock drwx------. 2 mysql mysql 4096 11月 16 12:51 performance_schema -rw-------. 1 mysql root 2538 11月 16 18:18 wsrep_recovery.N15shv [tom@kube-node-13 ~]$ 好了，现在知道了，这些文件都是 mysql用户的，那自然，我们应该是 sudo -u mysql .来吧。 [tom@kube-node-13 ~]$ sudo -u mysql mysqld --verbose 161116 18:32:38 [Note] mysqld (mysqld 10.0.28-MariaDB-wsrep) starting as process 12963 ... 161116 18:32:38 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 18:32:38 [Note] WSREP: wsrep_load(): loading provider library &apos;/usr/lib/galera/libgalera_smm.so&apos; 161116 18:32:38 [ERROR] WSREP: wsrep_load(): dlopen(): /usr/lib/galera/libgalera_smm.so: cannot open shared object file: No such file or directory 161116 18:32:38 [ERROR] WSREP: wsrep_load(/usr/lib/galera/libgalera_smm.so) failed: Invalid argument (22). Reverting to no provider. 161116 18:32:38 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 18:32:38 [Note] WSREP: wsrep_load(): loading provider library &apos;none&apos; 2016-11-16 18:32:38 7f71c04dd880 InnoDB: Warning: Using innodb_locks_unsafe_for_binlog is DEPRECATED. This option may be removed in future releases. Please use READ COMMITTED transaction isolation level instead, see http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html. 161116 18:32:38 [Note] InnoDB: Using mutexes to ref count buffer pool pages 161116 18:32:38 [Note] InnoDB: The InnoDB memory heap is disabled 161116 18:32:38 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins 161116 18:32:38 [Note] InnoDB: GCC builtin __atomic_thread_fence() is used for memory barrier 161116 18:32:38 [Note] InnoDB: Compressed tables use zlib 1.2.7 161116 18:32:38 [Note] InnoDB: Using Linux native AIO 161116 18:32:38 [Note] InnoDB: Using CPU crc32 instructions 161116 18:32:38 [Note] InnoDB: Initializing buffer pool, size = 128.0M 161116 18:32:38 [Note] InnoDB: Completed initialization of buffer pool 161116 18:32:38 [Note] InnoDB: Highest supported file format is Barracuda. 161116 18:32:38 [Note] InnoDB: 128 rollback segment(s) are active. 161116 18:32:38 [Note] InnoDB: Waiting for purge to start 161116 18:32:38 [Note] InnoDB: Percona XtraDB (http://www.percona.com) 5.6.32-79.0 started; log sequence number 1624176 161116 18:32:38 [Note] Plugin &apos;FEEDBACK&apos; is disabled. 161116 18:32:38 [Note] Server socket created on IP: &apos;0.0.0.0&apos;. 161116 18:32:38 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 18:32:38 [Note] WSREP: wsrep_load(): loading provider library &apos;none&apos; 161116 18:32:38 [Note] mysqld: ready for connections. Version: &apos;10.0.28-MariaDB-wsrep&apos; socket: &apos;/var/lib/mysql/mysql.sock&apos; port: 3306 MariaDB Server, wsrep_25.16.rc3fc46e ^C^C^C^C^C^CKilled [tom@kube-node-13 ~]$ 看到了。错误 161116 18:32:38 [ERROR] WSREP: wsrep_load(): dlopen(): /usr/lib/galera/libgalera_smm.so: cannot open shared object file: No such file or directory 还在。 找一下，看这个文件在不在了？ [tom@kube-node-13 ~]$ sudo ls -l /usr/lib/galera/libgalera_smm.so ls: cannot access /usr/lib/galera/libgalera_smm.so: No such file or directory 好了，这个文件真的不存在。那试一下 /usr/lib64/ 下有没有这个文件呢？ [tom@kube-node-13 ~]$ sudo ls /usr/lib64/galera/libgalera_smm.so /usr/lib64/galera/libgalera_smm.so 哈哈。有呀。那看一下，我们配置里面的是哪个？ [tom@kube-node-13 ~]$ sudo cat /etc/my.cnf.d/server.cnf ... binlog_format=ROW default-storage-engine=innodb innodb_autoinc_lock_mode=2 innodb_locks_unsafe_for_binlog=1 query_cache_size=0 query_cache_type=0 bind-address=0.0.0.0 datadir=/data/mariadb/mysql #datadir=/var/lib/mysql innodb_log_file_size=100M innodb_file_per_table innodb_flush_log_at_trx_commit=2 wsrep_provider=/usr/lib64/galera/libgalera_smm.so wsrep_cluster_address=&quot;gcomm://10.10.13.110,192.168.31.240,10.10.12.13&quot; wsrep_cluster_name=&apos;galera_cluster&apos; wsrep_node_address=&apos;10.10.12.13&apos; wsrep_node_name=&apos;db3&apos; wsrep_sst_method=rsync wsrep_sst_auth=sst_user:dbpass 看到了吧，是wsrep_provider=/usr/lib64/galera/libgalera_smm.so。是/usr/lib64/。那说明了，程序没有成功加载我们的配置文件呀。 无论怎样，我们先做一个软链接，看下，能不能成功。 注意哈，这里是直接把整个文件夹做成软链接，不要写错了。不是sudo ln -s /usr/lib64/galera/ /usr/lib/galera/， 更不是sudo ln -s /usr/lib64/galera/ /usr/lib/galera/。 [tom@kube-node-13 galera]$ sudo ln -s /usr/lib64/galera /usr/lib/galera [tom@kube-node-13 galera]$ cd /usr/lib/galera/ [tom@kube-node-13 galera]$ ls libgalera_smm.so [tom@kube-node-13 galera]$ 做好了。再来一次。 [tom@kube-node-13 galera]$ sudo -u mysql mysqld --verbose 161116 18:46:07 [Note] mysqld (mysqld 10.0.28-MariaDB-wsrep) starting as process 14216 ... 161116 18:46:07 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 18:46:07 [Note] WSREP: wsrep_load(): loading provider library &apos;/usr/lib/galera/libgalera_smm.so&apos; 161116 18:46:07 [Note] WSREP: wsrep_load(): Galera 25.3.18(r3632) by Codership Oy &lt;info@codership.com&gt; loaded successfully. 161116 18:46:07 [Note] WSREP: CRC-32C: using hardware acceleration. 161116 18:46:07 [Warning] WSREP: Could not open state file for reading: &apos;/data/mariadb/mysql//grastate.dat&apos; 161116 18:46:07 [Note] WSREP: Found saved state: 00000000-0000-0000-0000-000000000000:-1 161116 18:46:07 [Note] WSREP: Passing config to GCS: base_dir = /data/mariadb/mysql/; base_host = 10.10.12.13; base_port = 4567; cert.log_conflicts = no; debug = no; evs.auto_evict = 0; evs.delay_margin = PT1S; evs.delayed_keep_period = PT30S; evs.inactive_check_period = PT0.5S; evs.inactive_timeout = PT15S; evs.join_retrans_period = PT1S; evs.max_install_timeouts = 3; evs.send_window = 4; evs.stats_report_period = PT1M; evs.suspect_timeout = PT5S; evs.user_send_window = 2; evs.view_forget_timeout = PT24H; gcache.dir = /data/mariadb/mysql/; gcache.keep_pages_size = 0; gcache.mem_size = 0; gcache.name = /data/mariadb/mysql//galera.cache; gcache.page_size = 128M; gcache.size = 128M; gcomm.thread_prio = ; gcs.fc_debug = 0; gcs.fc_factor = 1.0; gcs.fc_limit = 16; gcs.fc_master_slave = no; gcs.max_packet_size = 64500; gcs.max_throttle = 0.25; gcs.recv_q_hard_limit = 9223372036854775807; gcs.recv_q_soft_limit = 0.25; gcs.sync_donor = no; gmcast.segment = 0; gmcast.version = 0; pc.announce_timeout = PT3S; pc.checksum = false; pc.ignore_q 161116 18:46:07 [Note] WSREP: Service thread queue flushed. 161116 18:46:07 [Note] WSREP: Assign initial position for certification: -1, protocol version: -1 161116 18:46:07 [Note] WSREP: wsrep_sst_grab() 161116 18:46:07 [Note] WSREP: Start replication 161116 18:46:07 [Note] WSREP: Setting initial position to 00000000-0000-0000-0000-000000000000:-1 161116 18:46:07 [Note] WSREP: protonet asio version 0 161116 18:46:07 [Note] WSREP: Using CRC-32C for message checksums. 161116 18:46:07 [Note] WSREP: backend: asio 161116 18:46:07 [Note] WSREP: gcomm thread scheduling priority set to other:0 161116 18:46:07 [Warning] WSREP: access file(/data/mariadb/mysql//gvwstate.dat) failed(No such file or directory) 161116 18:46:07 [Note] WSREP: restore pc from disk failed 161116 18:46:07 [Note] WSREP: GMCast version 0 161116 18:46:07 [Note] WSREP: (e0f5cb2a, &apos;tcp://0.0.0.0:4567&apos;) listening at tcp://0.0.0.0:4567 161116 18:46:07 [Note] WSREP: (e0f5cb2a, &apos;tcp://0.0.0.0:4567&apos;) multicast: , ttl: 1 161116 18:46:07 [Note] WSREP: EVS version 0 161116 18:46:07 [Note] WSREP: gcomm: connecting to group &apos;my_wsrep_cluster&apos;, peer &apos;10.10.13.110:&apos; 161116 18:46:10 [Warning] WSREP: no nodes coming from prim view, prim not possible 161116 18:46:10 [Note] WSREP: view(view_id(NON_PRIM,e0f5cb2a,1) memb { e0f5cb2a,0 } joined { } left { } partitioned { }) 161116 18:46:10 [Warning] WSREP: last inactive check more than PT1.5S ago (PT3.50279S), skipping check 161116 18:46:40 [Note] WSREP: view((empty)) 161116 18:46:40 [ERROR] WSREP: failed to open gcomm backend connection: 110: failed to reach primary view: 110 (Connection timed out) at gcomm/src/pc.cpp:connect():162 161116 18:46:40 [ERROR] WSREP: gcs/src/gcs_core.cpp:gcs_core_open():208: Failed to open backend connection: -110 (Connection timed out) 161116 18:46:40 [ERROR] WSREP: gcs/src/gcs.cpp:gcs_open():1380: Failed to open channel &apos;my_wsrep_cluster&apos; at &apos;gcomm://10.10.13.110&apos;: -110 (Connection timed out) 161116 18:46:40 [ERROR] WSREP: gcs connect failed: Connection timed out 161116 18:46:40 [ERROR] WSREP: wsrep::connect(gcomm://10.10.13.110) failed: 7 161116 18:46:40 [ERROR] Aborting 161116 18:46:40 [Note] WSREP: Service disconnected. 161116 18:46:41 [Note] WSREP: Some threads may fail to exit. 161116 18:46:41 [Note] mysqld: Shutdown complete [tom@kube-node-13 galera]$ 哈哈，看 161116 18:46:07 [Note] WSREP: wsrep_load(): loading provider library &#39;/usr/lib/galera/libgalera_smm.so&#39; 知道，这个错误，确实是跳过去了。现在来找第一个 [Warning] 。找到了。161116 18:46:07 [Warning] WSREP: Could not open state file for reading: &#39;/data/mariadb/mysql//grastate.dat&#39;那看下，这个文件有没有？ [tom@kube-node-13 galera]$ cd /data/mariadb/mysql [tom@kube-node-13 mysql]$ ls -lZ -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 aria_log.00000001 -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 aria_log_control -rw-------. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 galera.cache -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 grastate.dat -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 ibdata1 -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 ib_logfile0 -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 ib_logfile1 -rw-r-----. mysql root unconfined_u:object_r:mysqld_db_t:s0 kube-node-13.err -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 kube-node-13.pid -rw-rw----. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 multi-master.info drwx--x--x. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 mysql drwx------. mysql mysql unconfined_u:object_r:mysqld_db_t:s0 performance_schema -rw-rw-rw-. root root unconfined_u:object_r:mysqld_db_t:s0 slow_query_log.log 有/data/mariadb/mysql//grastate.dat呀。什么鬼？不要手动启动了。用sudo service 启动一下。 [tom@kube-node-13 mysql]$ sudo service mysql start Starting MySQL SUCCESS! [tom@kube-node-13 mysql]$ 161116 18:50:43 mysqld_safe Logging to &apos;/data/mariadb/mysql/kube-node-13.err&apos;. ^C [tom@kube-node-13 mysql]$ 好了，再把现有的 mysqld 关闭了去。 [tom@kube-node-13 mysql]$ sudo service mysql stop Shutting down MySQL161116 18:54:00 [Note] mysqld: Normal shutdown .161116 18:54:00 [Note] WSREP: Stop replication 161116 18:54:00 [Note] Event Scheduler: Purging the queue. 0 events 161116 18:54:00 [Note] InnoDB: FTS optimize thread exiting. 161116 18:54:00 [Note] InnoDB: Starting shutdown... 161116 18:54:01 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool ..161116 18:54:02 [Note] InnoDB: Shutdown completed; log sequence number 1624196 161116 18:54:02 [Note] mysqld: Shutdown complete SUCCESS! [tom@kube-node-13 mysql]$ ps -ef | grep mysql tom 15073 36010 0 18:54 pts/1 00:00:00 grep --color=auto mysql [tom@kube-node-13 mysql]$ sudo service mysql start Starting MySQL.161116 18:54:29 mysqld_safe Logging to &apos;/data/mariadb/mysql/kube-node-13.err&apos;. .. ................................ ERROR! [tom@kube-node-13 mysql]$ 有错误日志了。看去。 [tom@kube-node-13 mysql]$ sudo cat /data/mariadb/mysql/kube-node-13.err ... ... ... 161116 18:19:18 [Note] WSREP: wsrep_load(): loading provider library &apos;none&apos; 161116 18:19:18 [Note] /usr/sbin/mysqld: ready for connections. Version: &apos;10.0.28-MariaDB-wsrep&apos; socket: &apos;/var/lib/mysql/mysql.sock&apos; port: 3306 MariaDB Server, wsrep_25.16.rc3fc46e 161116 18:29:53 [Note] /usr/sbin/mysqld: Normal shutdown 161116 18:29:53 [Note] WSREP: Stop replication 161116 18:29:53 [Note] Event Scheduler: Purging the queue. 0 events 161116 18:29:53 [Note] InnoDB: FTS optimize thread exiting. 161116 18:29:53 [Note] InnoDB: Starting shutdown... 161116 18:29:54 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool 161116 18:29:56 [Note] InnoDB: Shutdown completed; log sequence number 1624176 161116 18:29:56 [Note] /usr/sbin/mysqld: Shutdown complete 161116 18:29:56 mysqld_safe mysqld from pid file /data/mariadb/mysql/kube-node-13.pid ended 161116 18:54:29 mysqld_safe Starting mysqld daemon with databases from /data/mariadb/mysql 161116 18:54:29 mysqld_safe WSREP: Running position recovery with --log_error=&apos;/data/mariadb/mysql/wsrep_recovery.N6pzuB&apos; --pid-file=&apos;/data/mariadb/mysql/kube-node-13-recover.pid&apos; 161116 18:54:29 [Note] /usr/sbin/mysqld (mysqld 10.0.28-MariaDB-wsrep) starting as process 15313 ... 161116 18:54:32 mysqld_safe WSREP: Recovered position 00000000-0000-0000-0000-000000000000:-1 161116 18:54:32 [Note] /usr/sbin/mysqld (mysqld 10.0.28-MariaDB-wsrep) starting as process 15379 ... 161116 18:54:32 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 18:54:32 [Note] WSREP: wsrep_load(): loading provider library &apos;/usr/lib/galera/libgalera_smm.so&apos; 161116 18:54:32 [Note] WSREP: wsrep_load(): Galera 25.3.18(r3632) by Codership Oy &lt;info@codership.com&gt; loaded successfully. 161116 18:54:32 [Note] WSREP: CRC-32C: using hardware acceleration. 161116 18:54:32 [Note] WSREP: Found saved state: 00000000-0000-0000-0000-000000000000:-1 161116 18:54:32 [Note] WSREP: Passing config to GCS: base_dir = /data/mariadb/mysql/; base_host = 10.10.12.13; base_port = 4567; cert.log_conflicts = no; debug = no; evs.auto_evict = 0; evs.delay_margin = PT1S; evs.delayed_keep_period = PT30S; evs.inactive_check_period = PT0.5S; evs.inactive_timeout = PT15S; evs.join_retrans_period = PT1S; evs.max_install_timeouts = 3; evs.send_window = 4; evs.stats_report_period = PT1M; evs.suspect_timeout = PT5S; evs.user_send_window = 2; evs.view_forget_timeout = PT24H; gcache.dir = /data/mariadb/mysql/; gcache.keep_pages_size = 0; gcache.mem_size = 0; gcache.name = /data/mariadb/mysql//galera.cache; gcache.page_size = 128M; gcache.size = 128M; gcomm.thread_prio = ; gcs.fc_debug = 0; gcs.fc_factor = 1.0; gcs.fc_limit = 16; gcs.fc_master_slave = no; gcs.max_packet_size = 64500; gcs.max_throttle = 0.25; gcs.recv_q_hard_limit = 9223372036854775807; gcs.recv_q_soft_limit = 0.25; gcs.sync_donor = no; gmcast.segment = 0; gmcast.version = 0; pc.announce_timeout = PT3S; pc.checksum = false; pc.ignore_q 161116 18:54:32 [Note] WSREP: Service thread queue flushed. 161116 18:54:32 [Note] WSREP: Assign initial position for certification: -1, protocol version: -1 161116 18:54:32 [Note] WSREP: wsrep_sst_grab() 161116 18:54:32 [Note] WSREP: Start replication 161116 18:54:32 [Note] WSREP: Setting initial position to 00000000-0000-0000-0000-000000000000:-1 161116 18:54:32 [Note] WSREP: protonet asio version 0 161116 18:54:32 [Note] WSREP: Using CRC-32C for message checksums. 161116 18:54:32 [Note] WSREP: backend: asio 161116 18:54:32 [Note] WSREP: gcomm thread scheduling priority set to other:0 161116 18:54:32 [Warning] WSREP: access file(/data/mariadb/mysql//gvwstate.dat) failed(No such file or directory) 161116 18:54:32 [Note] WSREP: restore pc from disk failed 161116 18:54:32 [Note] WSREP: GMCast version 0 161116 18:54:32 [Note] WSREP: (0e6fea53, &apos;tcp://0.0.0.0:4567&apos;) listening at tcp://0.0.0.0:4567 161116 18:54:32 [Note] WSREP: (0e6fea53, &apos;tcp://0.0.0.0:4567&apos;) multicast: , ttl: 1 161116 18:54:32 [Note] WSREP: EVS version 0 161116 18:54:32 [Note] WSREP: gcomm: connecting to group &apos;my_wsrep_cluster&apos;, peer &apos;10.10.13.110:&apos; 161116 18:54:35 [Warning] WSREP: no nodes coming from prim view, prim not possible 161116 18:54:35 [Note] WSREP: view(view_id(NON_PRIM,0e6fea53,1) memb { 0e6fea53,0 } joined { } left { } partitioned { }) 161116 18:54:36 [Warning] WSREP: last inactive check more than PT1.5S ago (PT3.50217S), skipping check 161116 18:55:05 [Note] WSREP: view((empty)) 161116 18:55:05 [ERROR] WSREP: failed to open gcomm backend connection: 110: failed to reach primary view: 110 (Connection timed out) at gcomm/src/pc.cpp:connect():162 161116 18:55:05 [ERROR] WSREP: gcs/src/gcs_core.cpp:gcs_core_open():208: Failed to open backend connection: -110 (Connection timed out) 161116 18:55:05 [ERROR] WSREP: gcs/src/gcs.cpp:gcs_open():1380: Failed to open channel &apos;my_wsrep_cluster&apos; at &apos;gcomm://10.10.13.110&apos;: -110 (Connection timed out) 161116 18:55:05 [ERROR] WSREP: gcs connect failed: Connection timed out 161116 18:55:05 [ERROR] WSREP: wsrep::connect(gcomm://10.10.13.110) failed: 7 161116 18:55:05 [ERROR] Aborting 161116 18:55:05 [Note] WSREP: Service disconnected. 161116 18:55:06 [Note] WSREP: Some threads may fail to exit. 161116 18:55:06 [Note] /usr/sbin/mysqld: Shutdown complete 161116 18:55:06 mysqld_safe mysqld from pid file /data/mariadb/mysql/kube-node-13.pid ended [tom@kube-node-13 mysql]$ date 2016年 11月 16日 星期三 18:55:16 CST [tom@kube-node-13 mysql]$ 嗯，确实是现在的日志。来看一下。 161116 18:54:32 [Warning] WSREP: access file(/data/mariadb/mysql//gvwstate.dat) failed(No such file or directory) 161116 18:54:32 [Note] WSREP: restore pc from disk failed 161116 18:54:32 [Note] WSREP: GMCast version 0 161116 18:54:32 [Note] WSREP: (0e6fea53, &apos;tcp://0.0.0.0:4567&apos;) listening at tcp://0.0.0.0:4567 161116 18:54:32 [Note] WSREP: (0e6fea53, &apos;tcp://0.0.0.0:4567&apos;) multicast: , ttl: 1 161116 18:54:32 [Note] WSREP: EVS version 0 161116 18:54:32 [Note] WSREP: gcomm: connecting to group &apos;my_wsrep_cluster&apos;, peer &apos;10.10.13.110:&apos; 哈。有问题呀。我们在配置文件中的 wsrep_cluster_address=&quot;gcomm://10.10.13.110,192.168.31.240,10.10.12.13&quot; wsrep_cluster_name=&#39;galera_cluster&#39; 到这里怎么是这样的啦！！！ 好吧。快回忆，是哪里配置过 my_wsrep_cluster. 想到了。之前在 /etc/my.cnf.d/wsrep.cnf 里面配置过这个。 [tom@kube-node-13 mysql]$ cd /etc/my.cnf.d/ [tom@kube-node-13 my.cnf.d]$ ls -la total 40 drwxr-xr-x. 2 root root 4096 11月 16 19:09 . drwxr-xr-x. 141 root root 8192 11月 16 16:45 .. -rw-r--r--. 1 root root 295 10月 28 01:16 client.cnf -rw-r--r--. 1 root root 232 10月 28 01:16 mysql-clients.cnf -rw-r--r--. 1 root root 1772 11月 16 18:59 server.cnf -rw-r--r--. 1 root root 1007 11月 16 14:10 server.cnf_original -rw-r--r--. 1 root root 285 11月 3 09:14 tokudb.cnf -rw-r--r--. 1 root root 3611 11月 16 15:10 wsrep.cnf [tom@kube-node-13 my.cnf.d]$ vi wsrep.cnf 查了一下，里面确实就是有呀。哭了。原来是这个文件的那把这个文件移出去，再试一下吧。 [tom@kube-node-13 my.cnf.d]$ sudo mv wsrep.cnf ~/wsrep.cnf.bak [tom@kube-node-13 my.cnf.d]$ ls client.cnf mysql-clients.cnf server.cnf server.cnf_original tokudb.cnf [tom@kube-node-13 my.cnf.d]$ sudo service mysql status ERROR! MySQL is not running, but lock file (/var/lock/subsys/mysql) exists [tom@kube-node-13 my.cnf.d]$ sudo service mysql stop ERROR! MySQL server PID file could not be found! [tom@kube-node-13 my.cnf.d]$ sudo service mysql start Starting MySQL.161116 19:12:20 mysqld_safe Logging to &apos;/data/mariadb/mysql/kube-node-13.err&apos;. ............a...................... ERROR! [tom@kube-node-13 my.cnf.d]$ 崩溃，看日志。 [tom@kube-node-13 my.cnf.d]$ sudo cat /data/mariadb/mysql/kube-node-13.err ... ... ... 161116 19:02:19 mysqld_safe mysqld from pid file /data/mariadb/mysql/kube-node-13.pid ended 161116 19:12:20 mysqld_safe Starting mysqld daemon with databases from /data/mariadb/mysql 161116 19:12:20 mysqld_safe WSREP: Running position recovery with --log_error=&apos;/data/mariadb/mysql/wsrep_recovery.3kyk74&apos; --pid-file=&apos;/data/mariadb/mysql/kube-node-13-recover.pid&apos; 161116 19:12:20 [Note] /usr/sbin/mysqld (mysqld 10.0.28-MariaDB-wsrep) starting as process 17474 ... 161116 19:12:23 mysqld_safe WSREP: Recovered position 00000000-0000-0000-0000-000000000000:-1 161116 19:12:23 [Note] /usr/sbin/mysqld (mysqld 10.0.28-MariaDB-wsrep) starting as process 17514 ... 161116 19:12:23 [Note] WSREP: Read nil XID from storage engines, skipping position init 161116 19:12:23 [Note] WSREP: wsrep_load(): loading provider library &apos;/usr/lib64/galera/libgalera_smm.so&apos; 161116 19:12:23 [Note] WSREP: wsrep_load(): Galera 25.3.18(r3632) by Codership Oy &lt;info@codership.com&gt; loaded successfully. 161116 19:12:23 [Note] WSREP: CRC-32C: using hardware acceleration. 161116 19:12:23 [Note] WSREP: Found saved state: 00000000-0000-0000-0000-000000000000:-1 161116 19:12:23 [Note] WSREP: Passing config to GCS: base_dir = /data/mariadb/mysql/; base_host = 10.10.12.13; base_port = 4567; cert.log_conflicts = no; debug = no; evs.auto_evict = 0; evs.delay_margin = PT1S; evs.delayed_keep_period = PT30S; evs.inactive_check_period = PT0.5S; evs.inactive_timeout = PT15S; evs.join_retrans_period = PT1S; evs.max_install_timeouts = 3; evs.send_window = 4; evs.stats_report_period = PT1M; evs.suspect_timeout = PT5S; evs.user_send_window = 2; evs.view_forget_timeout = PT24H; gcache.dir = /data/mariadb/mysql/; gcache.keep_pages_size = 0; gcache.mem_size = 0; gcache.name = /data/mariadb/mysql//galera.cache; gcache.page_size = 128M; gcache.size = 128M; gcomm.thread_prio = ; gcs.fc_debug = 0; gcs.fc_factor = 1.0; gcs.fc_limit = 16; gcs.fc_master_slave = no; gcs.max_packet_size = 64500; gcs.max_throttle = 0.25; gcs.recv_q_hard_limit = 9223372036854775807; gcs.recv_q_soft_limit = 0.25; gcs.sync_donor = no; gmcast.segment = 0; gmcast.version = 0; pc.announce_timeout = PT3S; pc.checksum = false; pc.ignore_q 161116 19:12:23 [Note] WSREP: Service thread queue flushed. 161116 19:12:23 [Note] WSREP: Assign initial position for certification: -1, protocol version: -1 161116 19:12:23 [Note] WSREP: wsrep_sst_grab() 161116 19:12:23 [Note] WSREP: Start replication 161116 19:12:23 [Note] WSREP: Setting initial position to 00000000-0000-0000-0000-000000000000:-1 161116 19:12:23 [Note] WSREP: protonet asio version 0 161116 19:12:23 [Note] WSREP: Using CRC-32C for message checksums. 161116 19:12:23 [Note] WSREP: backend: asio 161116 19:12:23 [Note] WSREP: gcomm thread scheduling priority set to other:0 161116 19:12:23 [Warning] WSREP: access file(/data/mariadb/mysql//gvwstate.dat) failed(No such file or directory) 161116 19:12:23 [Note] WSREP: restore pc from disk failed 161116 19:12:23 [Note] WSREP: GMCast version 0 161116 19:12:23 [Note] WSREP: (8c84d2c7, &apos;tcp://0.0.0.0:4567&apos;) listening at tcp://0.0.0.0:4567 161116 19:12:23 [Note] WSREP: (8c84d2c7, &apos;tcp://0.0.0.0:4567&apos;) multicast: , ttl: 1 161116 19:12:23 [Note] WSREP: EVS version 0 161116 19:12:23 [Note] WSREP: gcomm: connecting to group &apos;galera_cluster&apos;, peer &apos;10.10.12.13:,10.10.13.110:,192.168.31.240:&apos; 161116 19:12:23 [Note] WSREP: (8c84d2c7, &apos;tcp://0.0.0.0:4567&apos;) connection established to 8c84d2c7 tcp://10.10.12.13:4567 161116 19:12:23 [Warning] WSREP: (8c84d2c7, &apos;tcp://0.0.0.0:4567&apos;) address &apos;tcp://10.10.12.13:4567&apos; points to own listening address, blacklisting 161116 19:12:23 [Note] WSREP: (8c84d2c7, &apos;tcp://0.0.0.0:4567&apos;) connection established to 8c84d2c7 tcp://10.10.12.13:4567 161116 19:12:26 [Warning] WSREP: no nodes coming from prim view, prim not possible 161116 19:12:26 [Note] WSREP: view(view_id(NON_PRIM,8c84d2c7,1) memb { 8c84d2c7,0 } joined { } left { } partitioned { }) 161116 19:12:26 [Warning] WSREP: last inactive check more than PT1.5S ago (PT3.50305S), skipping check 161116 19:12:56 [Note] WSREP: view((empty)) 161116 19:12:56 [ERROR] WSREP: failed to open gcomm backend connection: 110: failed to reach primary view: 110 (Connection timed out) at gcomm/src/pc.cpp:connect():162 161116 19:12:56 [ERROR] WSREP: gcs/src/gcs_core.cpp:gcs_core_open():208: Failed to open backend connection: -110 (Connection timed out) 161116 19:12:56 [ERROR] WSREP: gcs/src/gcs.cpp:gcs_open():1380: Failed to open channel &apos;galera_cluster&apos; at &apos;gcomm://10.10.12.13,10.10.13.110,192.168.31.240&apos;: -110 (Connection timed out) 161116 19:12:56 [ERROR] WSREP: gcs connect failed: Connection timed out 161116 19:12:56 [ERROR] WSREP: wsrep::connect(gcomm://10.10.12.13,10.10.13.110,192.168.31.240) failed: 7 161116 19:12:56 [ERROR] Aborting 161116 19:12:56 [Note] WSREP: Service disconnected. 161116 19:12:57 [Note] WSREP: Some threads may fail to exit. 161116 19:12:57 [Note] /usr/sbin/mysqld: Shutdown complete 161116 19:12:57 mysqld_safe mysqld from pid file /data/mariadb/mysql/kube-node-13.pid ended [tom@kube-node-13 my.cnf.d]$ 好事情。161116 19:12:23 [Note] WSREP: wsrep_load(): loading provider library &#39;/usr/lib64/galera/libgalera_smm.so&#39;161116 19:12:23 [Note] WSREP: gcomm: connecting to group &#39;galera_cluster&#39;, peer &#39;10.10.12.13:,10.10.13.110:,192.168.31.240:&#39;161116 19:12:23 [Note] WSREP: (8c84d2c7, &#39;tcp://0.0.0.0:4567&#39;) connection established to 8c84d2c7 tcp://10.10.12.13:4567这几个关键的点，都正常了。 但是为什么还出错了呢。崩溃了吧。 清醒一下，让我想想，为什么？ 叮咚。 明白了。刚刚是，只启动cluster的第一台机器，命令错了哈。应该用 sudo /etc/init.d/mysql start --wsrep-new-cluster，下回要注意呀。 [tom@kube-node-13 my.cnf.d]$ sudo /etc/init.d/mysql start --wsrep-new-cluster Starting MySQL.161116 19:17:28 mysqld_safe Logging to &apos;/data/mariadb/mysql/kube-node-13.err&apos;. . SUCCESS! [tom@kube-node-13 my.cnf.d]$ mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;&quot;; Enter password: +------------------------------+---------------------------------------------+ | Variable_name | Value | +------------------------------+---------------------------------------------+ | wsrep_local_state_uuid | 440fe21c-abee-11e6-b1c1-9bfbe1e4335d | | wsrep_protocol_version | 7 | | wsrep_last_committed | 0 | | wsrep_replicated | 0 | | wsrep_replicated_bytes | 0 | | wsrep_repl_keys | 0 | | wsrep_repl_keys_bytes | 0 | | wsrep_repl_data_bytes | 0 | | wsrep_repl_other_bytes | 0 | | wsrep_received | 2 | | wsrep_received_bytes | 138 | | wsrep_local_commits | 0 | | wsrep_local_cert_failures | 0 | | wsrep_local_replays | 0 | | wsrep_local_send_queue | 0 | | wsrep_local_send_queue_max | 1 | | wsrep_local_send_queue_min | 0 | | wsrep_local_send_queue_avg | 0.000000 | | wsrep_local_recv_queue | 0 | | wsrep_local_recv_queue_max | 2 | | wsrep_local_recv_queue_min | 0 | | wsrep_local_recv_queue_avg | 0.500000 | | wsrep_local_cached_downto | 18446744073709551615 | | wsrep_flow_control_paused_ns | 0 | | wsrep_flow_control_paused | 0.000000 | | wsrep_flow_control_sent | 0 | | wsrep_flow_control_recv | 0 | | wsrep_cert_deps_distance | 0.000000 | | wsrep_apply_oooe | 0.000000 | | wsrep_apply_oool | 0.000000 | | wsrep_apply_window | 0.000000 | | wsrep_commit_oooe | 0.000000 | | wsrep_commit_oool | 0.000000 | | wsrep_commit_window | 0.000000 | | wsrep_local_state | 4 | | wsrep_local_state_comment | Synced | | wsrep_cert_index_size | 0 | | wsrep_causal_reads | 0 | | wsrep_cert_interval | 0.000000 | | wsrep_incoming_addresses | 10.10.12.13:3306 | | wsrep_desync_count | 0 | | wsrep_evs_delayed | | | wsrep_evs_evict_list | | | wsrep_evs_repl_latency | 4.903e-06/9.301e-06/1.892e-05/5.26662e-06/5 | | wsrep_evs_state | OPERATIONAL | | wsrep_gcomm_uuid | 440ea66b-abee-11e6-9185-f7b2a306dbf2 | | wsrep_cluster_conf_id | 1 | | wsrep_cluster_size | 1 | | wsrep_cluster_state_uuid | 440fe21c-abee-11e6-b1c1-9bfbe1e4335d | | wsrep_cluster_status | Primary | | wsrep_connected | ON | | wsrep_local_bf_aborts | 0 | | wsrep_local_index | 0 | | wsrep_provider_name | Galera | | wsrep_provider_vendor | Codership Oy &lt;info@codership.com&gt; | | wsrep_provider_version | 25.3.18(r3632) | | wsrep_ready | ON | | wsrep_thread_count | 2 | +------------------------------+---------------------------------------------+ [tom@kube-node-13 my.cnf.d]$ 终于是成功了!终于是成功了!终于是成功了!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[markdown]]></title>
      <url>%2F2016%2F11%2F17%2Fmarkdown%2F</url>
      <content type="text"><![CDATA[Markdown转HTML在线版： 在一起（这个网站还有很多其实转换工具）带了样式，但是不能用于 表格 作业部落不带样式，但是可用于 表格 HTML转Markdown在线版： 在线工具 （这个网站还有很多其实转换工具）* end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之mysql_secure_installation]]></title>
      <url>%2F2016%2F11%2F15%2Fmysql-2mysql%E7%B3%BB%E5%88%97%E4%B9%8Bmysql_secure_installation%2F</url>
      <content type="text"><![CDATA[参考http://www.myexception.cn/mysql/1902013.html 过程安装完mysql-server 会提示可以运行mysql_secure_installation。运行mysql_secure_installation会执行几个设置： a)为root用户设置密码 b)删除匿名账号 c)取消root用户远程登录 d)删除test库和对test库的访问权限 e)刷新授权表使修改生效通过这几项的设置能够提高mysql库的安全。建议生产环境中mysql安装这完成后一定要运行一次mysql_secure_installation，详细步骤请参看下面的命令: [root@dns ~]# mysql_secure_installation /usr/bin/mysql_secure_installation:行379: find_mysql_client: 未找到命令 NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we&apos;ll need the current password for the root user. If you&apos;ve just installed MariaDB, and you haven&apos;t set the root password yet, the password will be blank, so you should just press enter here. ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES) Enter current password for root (enter for none): --&gt;初次运行直接enter OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] Y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from &apos;localhost&apos;. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] ... Success! By default, MariaDB comes with a database named &apos;test&apos; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] ... Success! Cleaning up... All done! If you&apos;ve completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之集群 MariaDB-Galera-server 安装]]></title>
      <url>%2F2016%2F11%2F15%2Fmysql-1mysql%E7%B3%BB%E5%88%97%E4%B9%8B%E9%9B%86%E7%BE%A4%20MariaDB-Galera-server%20%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[MariaDB Galera Cluster 部署 参考http://www.linuxidc.com/Linux/2015-07/119512.htm 安装安装mariadb10.0 官方的通过yum安装教程 根据不同的系统来下载repo吧，更多的MariaDB.repo 或者，查看之前的 mariadb安装教程，就可以了。 具体，我的是这样的。 MariaDB.repo [cdn@test_240 yum.repos.d]$ cat /etc/yum.repos.d/MariaDB.repo MariaDB 10.0 CentOS repository list - created 2016-11-16 02:27 UTChttp://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 2. 安装数据库sudo yum clean all sudo yum install MariaDB-Galera-server MariaDB-client galera -y 卸载 sudo yum remove MariaDB-server MariaDB-client sudo yum remove MariaDB-common -y 如果要删除旧的数据库可以使用remove, 参数 -y 是确认，不用提示。此处，安装的是服务器和客户端，一般来说安装这两个就可以了。 3. 启动数据库如果不用进行其他的操作，则现在就可以直接启动数据库，并进行测试了。 查看mysql状态;关闭数据库 # service mysql status # sudo /etc/init.d/mysql status # service mysql stop # sudo /etc/init.d/mysql stop 启动数据库 # service mysql start # sudo /etc/init.d/mysql start 开机自启动 # sudo chkconfig mysql on sudo systemctl start mariadb.service类似这种的方式，在这已失效 [cdn@test_240 ~]$ sudo systemctl start mariadb.service [sudo] password for cdn: Failed to start mariadb.service: Unit mariadb.service failed to load: No such file or directory. [cdn@test_240 ~]$ sudo /etc/init.d/mysql start Starting MySQL.161116 13:34:03 mysqld_safe Logging to &apos;/var/lib/mysql/test_240.err&apos;. .. SUCCESS! [cdn@test_240 ~]$ sudo chkconfig mysql on [cdn@test_240 ~]$ sudo /etc/init.d/mysql status SUCCESS! MySQL running (13959) [cdn@test_240 ~]$ sudo /etc/init.d/mysql stop Shutting down MySQL... SUCCESS! [cdn@test_240 ~]$ 4. 修改root密码# 修改root密码 mysqladmin -u root password &apos;root&apos; 因为安装好以后的root密码是空,所以需要设置; 如果是测试服务器,那么你可以直接使用root,不重要的密码很多时候可以设置为和用户名一致，以免忘记了又想不起来。如果是重要的服务器，请使用复杂密码，例如邮箱，各种自由组合的规则的字符等。 5. 登录数据库mysql -u root -p 如果是本机,那可以直接使用上面的命令登录，当然，需要输入密码. 如果是其他机器，那么可能需要如下的形式: mysql -h 127.0.0.1 -P 3306 -u root -p 6. 简单SQL测试&gt; -- 查看MySQL的状态 status; -- 显示支持的引擎 show engines; -- 显示所有数据库 show databases; -- 切换数据库上下文,即设置当前会话的默认数据库 use test; -- 显示本数据库所有的表 show tables; -- 创建一个表 CREATETABLE t_test ( id int(11) UNSIGNED NOTNULL AUTO_INCREMENT, userId char(36), lastLoginTime timestamp, PRIMARYKEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; -- 插入测试数据 insertinto t_test(userId) values (&apos;admin&apos;) ,(&apos;haha&apos;) ; -- 简单查询 select * from t_test; select id,userId from t_test where userId=&apos;admin&apos; ; 7. 修改数据存放目录mysql, MariaDB 的默认数据存放在 /var/lib/mysql/ 目录下,如果不想放到此处,或者是想要程序和数据分离，或者是磁盘原因,需要切换到其他路径,则可以通过修改 datadir系统变量来达成目的. # 停止数据库 service mysql stop # 创建目录,假设没有的话 mkdir /usr/local/ieternal/mysql_data # 拷贝默认数据库到新的位置 # -a 命令是将文件属性一起拷贝,否则各种问题 cp -a /var/lib/mysql /usr/local/ieternal/mysql_data # 备份原来的数据 cp -a /etc/my.cnf /etc/my.cnf_original # 其实查看 /etc/my.cnf 文件可以发现 # MariaDB 的此文件之中只有一个包含语句 # 所以需要修改的配置文件为 /etc/my.cnf.d/server.cnf cp /etc/my.cnf.d/server.cnf /etc/my.cnf.d/server.cnf_original vim /etc/my.cnf.d/server.cnf 然后 按 i 进入编辑模式,可以插入相关内容.使用键盘的上下左右键可以移动光标, 编辑完成以后，按 ESC 退出编辑模式(进入命令模式), 然后输入命令:wq 保存并退出 # 在文件的 mysqld 节下添加内容 [mysqld] datadir=/usr/local/ieternal/mysql_data/mysql socket=/var/lib/mysql/mysql.sock #default-character-set=utf8 character_set_server=utf8 slow_query_log=on slow_query_log_file=/usr/local/ieternal/mysql_data/slow_query_log.log long_query_time=2 其中,也只有 datadir 和 socket 比较重要; 而 default-character-set 是 mysql 自己认识的,而 mariadb5.5 就不认识,相当于变成了 character_set_server 7.1 创建慢查询日志文件既然上面指定了慢查询日志文件，我后来看了下MariaDB的err日志，发现MariaDB不会自己创建该文件，所以我们需要自己创建,并修改相应的文件权限(比如 MySQL 采用 mysql用户，可能我们使用 root用户创建的文件,此时要求慢查询日志文件对mysql用户可读可写就行。) touch /usr/local/ieternal/mysql_data/slow_query_log.log chmod 666 /usr/local/ieternal/mysql_data/slow_query_log.log 然后重新启动MySQL. service mysql start 综合命令方便大家ctrl+c, ctrl+v sudo service mysql status sudo service mysql stop cd /data/ ls sudo mkdir ./mariadb/mysql/ -p ls cd mariadb/mysql/ ls sudo cp -a /var/lib/mysql /data/mariadb/ ls cd ../ ls cd mysql/ ls sudo cp -a /etc/my.cnf /etc/my.cnf_original sudo cp /etc/my.cnf.d/server.cnf /etc/my.cnf.d/server.cnf_original sudo vim /etc/my.cnf.d/server.cnf sudo touch /data/mariadb/mysql/slow_query_log.log sudo chmod 666 /data/mariadb/mysql/slow_query_log.log sudo systemctl restart mariadb.service 其中 vim /etc/my.cnf.d/server.cnf # # These groups are read by MariaDB server. # Use it for options that only the server (but not clients) should see # # See the examples of server my.cnf files in /usr/share/mysql/ # # this is read by the standalone daemon and embedded servers [server] # this is only for the mysqld standalone daemon [mysqld] datadir=/data/mariadb/mysql socket=/var/lib/mysql/mysql.sock #default-character-set=utf8 character_set_server=utf8 slow_query_log=on slow_query_log_file=/data/mariadb/mysql/slow_query_log.log long_query_time=2 # this is only for embedded server [embedded] # This group is only read by MariaDB-5.5 servers. # If you use the same .cnf file for MariaDB of different versions, # use this group for options that older servers don&apos;t understand [mysqld-5.5] # These two groups are only read by MariaDB servers, not by MySQL. # If you use the same .cnf file for MySQL and MariaDB, # you can put MariaDB-only options here [mariadb] [mariadb-5.5] 安装报错报错1报错： MariaDB-client-10.1.19-1.el7.centos.x86_64: [Errno 256] No more mirrors to try. 出错原因： 之前已经在 /etc/yum.repos.d/MariaDB.repo 中设置过 baseurl = http://yum.mariadb.org/10.1/centos6-amd64, 而后又觉得不对，要降低为baseurl = http://yum.mariadb.org/10.0/centos6-amd64, 导致之前的缓存没有清除。 解决： 运行sudo yum clean all，然后再次运行sudo yum install MariaDB-Galera-server MariaDB-client galera -y 具体报错如下： [tom@kube-node-13 ~]$ ll /etc/yum.repos.d/ 总用量 44 -rw-r--r--. 1 root root 1664 12月 9 2015 CentOS-Base.repo -rw-r--r--. 1 root root 1309 12月 9 2015 CentOS-CR.repo -rw-r--r--. 1 root root 649 12月 9 2015 CentOS-Debuginfo.repo -rw-r--r--. 1 root root 290 12月 9 2015 CentOS-fasttrack.repo -rw-r--r--. 1 root root 630 12月 9 2015 CentOS-Media.repo -rw-r--r--. 1 root root 1331 12月 9 2015 CentOS-Sources.repo -rw-r--r--. 1 root root 1952 12月 9 2015 CentOS-Vault.repo -rw-r--r--. 1 root root 957 3月 31 2016 epel.repo -rw-r--r--. 1 root root 1056 3月 31 2016 epel-testing.repo -rw-r--r--. 1 root root 261 11月 16 10:28 MariaDB.repo -rw-r--r--. 1 root root 401 2月 15 2016 zabbix.repo [tom@kube-node-13 ~]$ sudo yum install MariaDB-client galera -y 已加载插件：fastestmirror, langpacks Loading mirror speeds from cached hostfile * base: ftp.sjtu.edu.cn * epel: free.nchc.org.tw * extras: ftp.sjtu.edu.cn * updates: ftp.sjtu.edu.cn 正在解决依赖关系 --&gt; 正在检查事务 ---&gt; 软件包 MariaDB-client.x86_64.0.10.1.19-1.el7.centos 将被 安装 --&gt; 正在处理依赖关系 MariaDB-common，它被软件包 MariaDB-client-10.1.19-1.el7.centos.x86_64 需要 ---&gt; 软件包 galera.x86_64.0.25.3.18-1.rhel7.el7.centos 将被 安装 --&gt; 正在处理依赖关系 libboost_program_options.so.1.53.0()(64bit)，它被软件包 galera-25.3.18-1.rhel7.el7.centos.x86_64 需要 --&gt; 正在检查事务 ---&gt; 软件包 MariaDB-common.x86_64.0.10.1.19-1.el7.centos 将被 安装 ---&gt; 软件包 boost-program-options.x86_64.0.1.53.0-25.el7 将被 安装 --&gt; 处理 MariaDB-common-10.1.19-1.el7.centos.x86_64 与 mariadb-libs &lt; 1:10.1.19-1.el7.centos 的冲突 --&gt; 正在使用新的信息重新解决依赖关系 --&gt; 正在检查事务 ---&gt; 软件包 MariaDB-shared.x86_64.0.10.1.19-1.el7.centos 将被 舍弃 ---&gt; 软件包 mariadb-libs.x86_64.1.5.5.50-1.el7_2 将被 取代 --&gt; 解决依赖关系完成 依赖关系解决 ==================================================================================================================================================================================================================== Package 架构 版本 源 大小 ==================================================================================================================================================================================================================== 正在安装: MariaDB-client x86_64 10.1.19-1.el7.centos mariadb 39 M MariaDB-shared x86_64 10.1.19-1.el7.centos mariadb 1.3 M 替换 mariadb-libs.x86_64 1:5.5.50-1.el7_2 galera x86_64 25.3.18-1.rhel7.el7.centos mariadb 7.8 M 为依赖而安装: MariaDB-common x86_64 10.1.19-1.el7.centos mariadb 43 k boost-program-options x86_64 1.53.0-25.el7 base 155 k 事务概要 ==================================================================================================================================================================================================================== 安装 3 软件包 (+2 依赖软件包) 总计：48 M 总下载量：40 M Downloading packages: MariaDB-10.1.19-centos7-x86_64 FAILED http://yum.mariadb.org/10.0/centos7-amd64/rpms/MariaDB-10.1.19-centos7-x86_64-client.rpm: [Errno 14] HTTP Error 404 - Not Found ] 0.0 B/s | 0 B --:--:-- ETA 正在尝试其它镜像。 To address this issue please refer to the below knowledge base article https://access.redhat.com/articles/1320623 If above article doesn&apos;t help to resolve this issue please create a bug on https://bugs.centos.org/ MariaDB-10.1.19-centos7-x86_64 FAILED http://yum.mariadb.org/10.0/centos7-amd64/rpms/MariaDB-10.1.19-centos7-x86_64-common.rpm: [Errno 14] HTTP Error 404 - Not Found ] 0.0 B/s | 0 B --:--:-- ETA 正在尝试其它镜像。 MariaDB-10.1.19-centos7-x86_64 FAILED http://yum.mariadb.org/10.0/centos7-amd64/rpms/MariaDB-10.1.19-centos7-x86_64-shared.rpm: [Errno 14] HTTP Error 404 - Not Found ] 0.0 B/s | 0 B --:--:-- ETA 正在尝试其它镜像。 Error downloading packages: MariaDB-client-10.1.19-1.el7.centos.x86_64: [Errno 256] No more mirrors to try. MariaDB-shared-10.1.19-1.el7.centos.x86_64: [Errno 256] No more mirrors to try. MariaDB-common-10.1.19-1.el7.centos.x86_64: [Errno 256] No more mirrors to try. [tom@kube-node-13 ~]$ end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之mysql使用规范]]></title>
      <url>%2F2016%2F11%2F15%2Fmysql-3mysql%E7%B3%BB%E5%88%97%E4%B9%8Bmysql%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[mysql使用规范 级别说明所有级别： 级别1，必须做到 级别2，优先做到 级别：1 库名，表名，字段名：使用小写 字符：utf8 表：不使用删除表（drop），而使用清空表（truncate，或者delete from） 表：记录数超过10000的情况下，加索引 级别：2 库名，表名，字段名：使用下划线分割。如：day_stocka_wind 表：加主键 清空表：优先使用truncate（命令：truncate table tbl_name;），其次使用delete from(命令：delete from tbl_name;） 关于删除表删除表：使用DROP TABLE tbl_name;， 或者DROP TABLE IF EXISTS tbl_name; 若有业务确实需要删除表的，请联系小鱼。 end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之目录]]></title>
      <url>%2F2016%2F11%2F15%2Fmysql%2F</url>
      <content type="text"><![CDATA[mysql系列之目录 mysql7, mysql系列之navicat mysql8, mysql系列之MySQL查看用户权限]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nginx txt,json文件 中文乱码]]></title>
      <url>%2F2016%2F11%2F15%2Fnginx-2txt%2Cjson%E6%96%87%E4%BB%B6%20%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81.txt%2Cjson%E6%96%87%E4%BB%B6%20%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2F</url>
      <content type="text"><![CDATA[nginx 中 txt,json文件 中文乱码在 /etc/nginx/conf.d/default.conf 中找到 location / { ,然后加入 charset utf-8; charset_types text/html 如： server { listen 8000; server_name localhost; #default_type &apos;text/html&apos;; #charset utf-8; #charset koi8-r; #access_log /var/log/nginx/log/host.access.log main; location / { charset utf-8; charset_types text/html application/json; add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nginx 跨域访问]]></title>
      <url>%2F2016%2F11%2F15%2Fnginx-1nginx%20%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%2F</url>
      <content type="text"><![CDATA[nginx 解决跨域访问的问题 跨域造成session丢失 nginx 解决跨域访问的问题。https://michielkalkman.com/snippets/nginx-cors-open-configuration.html http://enable-cors.org/server_nginx.html 所有网页都实现跨域 把下面的代码，放到 ，配置文件 /etc/nginx/conf.d/default.conf 中的 location / { 内 add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; 部分url（下以 /ok 为例） 请求实现跨域访问 把下面的代码，放到 ，配置文件 /etc/nginx/conf.d/default.conf 中 的 location /ok { 内 # # Wide-open CORS config for nginx # location / { if ($request_method = &apos;OPTIONS&apos;) { add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; # # Om nom nom cookies # add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; # # Custom headers and headers various browsers *should* be OK with but aren&apos;t # add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;; # # Tell client that this pre-flight info is valid for 20 days # add_header &apos;Access-Control-Max-Age&apos; 1728000; add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;; add_header &apos;Content-Length&apos; 0; return 204; } if ($request_method = &apos;POST&apos;) { add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;; } if ($request_method = &apos;GET&apos;) { add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;; } } 跨域造成session丢失https://segmentfault.com/q/1010000002905817 重点参考下面这个地方： 这个配置在不少地方应该都能找到，不同的主要是两点： 1。response.setHeader(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;); //是否支持cookie跨域 2。response.setHeader(&quot;Access-Control-Allow-Origin&quot;, request.getHeader(&quot;Origin&quot;)); 首先，配置了allow-credentials之后，如果allow-origin设为*，跨域时会报错说因为允许credentials，origin不能设为通配*，那所以设为简单的某个domain也是可以的，这种写法应该就是达到了任意domain都可以的效果吧。 然后angular部分也要设定个东西，举个栗子~ 解决方法： 填加下面的代码到 服务端代码 如：limitup/route/index.js中。 app.all(&apos;*&apos;, function(req, res, next) { res.header(&apos;Access-Control-Allow-Origin&apos;, req.headers.origin); res.header(&apos;Access-Control-Allow-Methods&apos;, &apos;GET, POST&apos;); res.header(&apos;Access-Control-Allow-Headers&apos;, &apos;Content-Type&apos;); res.header(&apos;Access-Control-Allow-Credentials&apos;, &apos;true&apos;); next(); }); end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nginx]]></title>
      <url>%2F2016%2F11%2F15%2Fnginx%2F</url>
      <content type="text"><![CDATA[nginx 系列]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之mysql-install]]></title>
      <url>%2F2016%2F11%2F15%2Fmysql-0mysql%E7%B3%BB%E5%88%97%E4%B9%8Bmariadb-install%2F</url>
      <content type="text"><![CDATA[主要参考：http://blog.csdn.net/renfufei/article/details/17616549 过程说明: 首先必须能链接外网. 如果不能直接访问,那也可以设置代理,请参考: 在内网机器上设置yum代理使用 yum 的权限要求是 root 用户,如果你不是,那么可以需要 在 shell命令之前加上 sudo, 或者 su root 切换到 super 管理员进行操作. 并可能需要输入密码. 1. 添加 yum 数据源 安装mariadb10.1官方的通过yum安装教程 根据不同的系统来下载repo吧，更多的MariaDB.repo 建议命名为 MariaDB.repo 类似的名字： cd /etc/yum.repos.d/ vim /etc/yum.repos.d/MariaDB.repo 然后,写入文件内容:(建议使用 10.0) # MariaDB 10.0 CentOS repository list - created 2015-08-12 10:59 UTC # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 这个baseurl可以通过浏览器打开，然后在 http://yum.mariadb.org/10.0/centos7-amd64/rpms/ 中可以看到这里面有些什么 .rpm 文件。 该文件的内容是参考官网,并从官网上生成的，设置安装源仓库的 具体的地址为: https://downloads.mariadb.org/mariadb/repositories/选择好操作系统版本之后既可以查看，其他操作系统的安装源也可以在此处查看并设置。如果服务器不支持https协议，或者gpgkey 保错，确保没问题的话，可以将 gpgcheck=1 修改为 gpgcheck=0,则不进行校验. 2. 安装数据库yum remove MariaDB-server MariaDB-client yum -y install MariaDB-server MariaDB-client 如果要删除旧的数据库可以使用remove, 参数 -y 是确认，不用提示。此处，安装的是服务器和客户端，一般来说安装这两个就可以了。 3. 启动数据库如果不用进行其他的操作，则现在就可以直接启动数据库，并进行测试了。 查看mysql状态;关闭数据库 # service mysql status # service mysql stop 启动数据库 # service mysql start 4. 修改root密码# 修改root密码 mysqladmin -u root password &apos;root&apos; 因为安装好以后的root密码是空,所以需要设置; 如果是测试服务器,那么你可以直接使用root,不重要的密码很多时候可以设置为和用户名一致，以免忘记了又想不起来。如果是重要的服务器，请使用复杂密码，例如邮箱，各种自由组合的规则的字符等。 5. 登录数据库mysql -u root -p 如果是本机,那可以直接使用上面的命令登录，当然，需要输入密码. 如果是其他机器，那么可能需要如下的形式: mysql -h 127.0.0.1 -P 3306 -u root -p 6. 简单SQL测试&gt; -- 查看MySQL的状态 status; -- 显示支持的引擎 show engines; -- 显示所有数据库 show databases; -- 切换数据库上下文,即设置当前会话的默认数据库 use test; -- 显示本数据库所有的表 show tables; -- 创建一个表 CREATETABLE t_test ( id int(11) UNSIGNED NOTNULL AUTO_INCREMENT, userId char(36), lastLoginTime timestamp, PRIMARYKEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; -- 插入测试数据 insertinto t_test(userId) values (&apos;admin&apos;) ,(&apos;haha&apos;) ; -- 简单查询 select * from t_test; select id,userId from t_test where userId=&apos;admin&apos; ; 7. 修改数据存放目录mysql, MariaDB 的默认数据存放在 /var/lib/mysql/ 目录下,如果不想放到此处,或者是想要程序和数据分离，或者是磁盘原因,需要切换到其他路径,则可以通过修改 datadir系统变量来达成目的. # 停止数据库 service mysql stop # 创建目录,假设没有的话 mkdir /usr/local/ieternal/mysql_data # 拷贝默认数据库到新的位置 # -a 命令是将文件属性一起拷贝,否则各种问题 cp -a /var/lib/mysql /usr/local/ieternal/mysql_data # 备份原来的数据 cp -a /etc/my.cnf /etc/my.cnf_original # 其实查看 /etc/my.cnf 文件可以发现 # MariaDB 的此文件之中只有一个包含语句 # 所以需要修改的配置文件为 /etc/my.cnf.d/server.cnf cp /etc/my.cnf.d/server.cnf /etc/my.cnf.d/server.cnf_original vim /etc/my.cnf.d/server.cnf 然后 按 i 进入编辑模式,可以插入相关内容.使用键盘的上下左右键可以移动光标, 编辑完成以后，按 ESC 退出编辑模式(进入命令模式), 然后输入命令:wq 保存并退出 # 在文件的 mysqld 节下添加内容 [mysqld] datadir=/usr/local/ieternal/mysql_data/mysql socket=/var/lib/mysql/mysql.sock #default-character-set=utf8 character_set_server=utf8 slow_query_log=on slow_query_log_file=/usr/local/ieternal/mysql_data/slow_query_log.log long_query_time=2 其中,也只有 datadir 和 socket 比较重要; 而 default-character-set 是 mysql 自己认识的,而 mariadb5.5 就不认识,相当于变成了 character_set_server 7.1 创建慢查询日志文件既然上面指定了慢查询日志文件，我后来看了下MariaDB的err日志，发现MariaDB不会自己创建该文件，所以我们需要自己创建,并修改相应的文件权限(比如 MySQL 采用 mysql用户，可能我们使用 root用户创建的文件,此时要求慢查询日志文件对mysql用户可读可写就行。) touch /usr/local/ieternal/mysql_data/slow_query_log.log chmod 666 /usr/local/ieternal/mysql_data/slow_query_log.log 然后重新启动MySQL. service mysql start 综合命令方便大家ctrl+c, ctrl+v sudo systemctl status mariadb.service sudo systemctl stop mariadb.service cd /data/ ls sudo mkdir ./mariadb/mysql/ -p ls cd mariadb/mysql/ ls sudo cp -a /var/lib/mysql /data/mariadb/ ls cd ../ ls cd mysql/ ls sudo cp -a /etc/my.cnf /etc/my.cnf_original sudo cp /etc/my.cnf.d/server.cnf /etc/my.cnf.d/server.cnf_original sudo vim /etc/my.cnf.d/server.cnf sudo touch /data/mariadb/mysql/slow_query_log.log sudo chmod 666 /data/mariadb/mysql/slow_query_log.log sudo systemctl restart mariadb.service 其中 vim /etc/my.cnf.d/server.cnf # # These groups are read by MariaDB server. # Use it for options that only the server (but not clients) should see # # See the examples of server my.cnf files in /usr/share/mysql/ # # this is read by the standalone daemon and embedded servers [server] # this is only for the mysqld standalone daemon [mysqld] datadir=/data/mariadb/mysql socket=/var/lib/mysql/mysql.sock #default-character-set=utf8 character_set_server=utf8 slow_query_log=on slow_query_log_file=/data/mariadb/mysql/slow_query_log.log long_query_time=2 # this is only for embedded server [embedded] # This group is only read by MariaDB-5.5 servers. # If you use the same .cnf file for MariaDB of different versions, # use this group for options that older servers don&apos;t understand [mysqld-5.5] # These two groups are only read by MariaDB servers, not by MySQL. # If you use the same .cnf file for MySQL and MariaDB, # you can put MariaDB-only options here [mariadb] [mariadb-5.5] 卸载sudo yum remove MariaDB-server -y sudo yum remove MariaDB-client -y sudo yum remove MariaDB-common -y end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux系列之yum]]></title>
      <url>%2F2016%2F11%2F15%2Flinux-1%2F</url>
      <content type="text"><![CDATA[yum安装的软件在哪? linux下如何查看某个软件 是否安装？安装路径在哪?linux下如何查看某个软件 是否安装？安装路径在哪 使用sudo rpm -qa来查看通过 yum安装的软件 [tom@kube-node-11 ~]$ sudo rpm -qa | grep Maria MariaDB-client-10.1.19-1.el7.centos.x86_64 MariaDB-common-10.1.19-1.el7.centos.x86_64 MariaDB-Galera-server-10.0.28-1.el7.centos.x86_64 MariaDB-shared-10.1.19-1.el7.centos.x86_64 linux 通过 yum search 得到，在当前情况下，能安装哪些软件，哪些软件安装不了。如下面 这个地方，显示 MariaDB-Galera-server 找不到。 [cdn@test_240 ~]$ sudo yum install MariaDB-Galera-server MariaDB-client galera -y Loaded plugins: fastestmirror, langpacks Loading mirror speeds from cached hostfile * base: mirrors.cn99.com * extras: mirrors.cn99.com * updates: mirrors.cn99.com No package MariaDB-Galera-server available. Package MariaDB-client-10.1.19-1.el7.centos.x86_64 already installed and latest version Package galera-25.3.18-1.rhel7.el7.centos.x86_64 already installed and latest version Nothing to do [cdn@test_240 ~]$ 那么，我们怎么办呢？用yum search吧 确保 MariaDB.repo 存在 [cdn@test_240 ~]$ ll /etc/yum.repos.d/ [cdn@test_240 ~]$ cat /etc/yum.repos.d/MariaDB.repo MariaDB 10.1 CentOS repository list - created 2016-11-15 02:38 UTChttp://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 [cdn@test_240 ~]$ 确保 MariaDB.repo 生效 先查是否能ping到baseurl [cdn@test_240 ~]$ cat /etc/yum.repos.d/MariaDB.repo # MariaDB 10.0 CentOS repository list - created 2016-11-16 02:27 UTC # http://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 [cdn@test_240 ~]$ ping yum.mariabdb.org ^C [cdn@test_240 ~]$ ping yum.mariadb.org PING yum.mariadb.org (142.4.217.28) 56(84) bytes of data. 64 bytes from bb02.mariadb.net (142.4.217.28): icmp_seq=1 ttl=47 time=272 ms 64 bytes from bb02.mariadb.net (142.4.217.28): icmp_seq=2 ttl=47 time=272 ms 64 bytes from bb02.mariadb.net (142.4.217.28): icmp_seq=3 ttl=47 time=272 ms ^C --- yum.mariadb.org ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2001ms rtt min/avg/max/mdev = 272.301/272.492/272.588/0.135 ms 说明可以ping yum.mariadb.org。 用 yum search查，有MariaDB.repo VS 没有MariaDB.repo情况下，得到的软件列表是否相同。 先走一个 sudo yum search MariaDB [cdn@test_240 ~]$ sudo yum search MariaDB Loaded plugins: fastestmirror, langpacks Loading mirror speeds from cached hostfile * base: mirrors.nwsuaf.edu.cn * epel: ftp.cuhk.edu.hk * extras: mirrors.cn99.com * updates: mirrors.cn99.com =============================================================================================== N/S matched: MariaDB =============================================================================================== MariaDB-client.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-common.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-compat.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-connect-engine.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-cracklib-password-check.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-devel.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-gssapi-client.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-gssapi-server.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-oqgraph-engine.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-server.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-shared.x86_64 : MariaDB: a very fast and robust SQL database server MariaDB-test.x86_64 : MariaDB: a very fast and robust SQL database server mariadb-bench.x86_64 : MariaDB benchmark scripts and data mariadb-devel.i686 : Files for development of MariaDB/MySQL applications mariadb-devel.x86_64 : Files for development of MariaDB/MySQL applications mariadb-embedded.i686 : MariaDB as an embeddable library mariadb-embedded.x86_64 : MariaDB as an embeddable library mariadb-embedded-devel.i686 : Development files for MariaDB as an embeddable library mariadb-embedded-devel.x86_64 : Development files for MariaDB as an embeddable library mariadb-libs.i686 : The shared libraries required for MariaDB/MySQL clients mariadb-libs.x86_64 : The shared libraries required for MariaDB/MySQL clients mariadb-server.x86_64 : The MariaDB server and related files mariadb.x86_64 : A community developed branch of MySQL mariadb-test.x86_64 : The test suite distributed with MariaD percona-xtrabackup.x86_64 : Online backup for InnoDB/XtraDB in MySQL, Percona Server and MariaDB Name and summary matches only, use &quot;search all&quot; for everything. [cdn@test_240 ~]$ 两2种方法（2种用其1就可以了）： 方法1, 把MariaDB.repo移除。 不MariaDB.repo 移除，再运行 sudo yum search MariaDB。 把MariaDB.repo 移除，再运行 sudo yum search MariaDB。 方法2, 用yum search --disablerepo=。 先 sudo yum search MariaDB。 再运行 sudo yum search MariaDB --disablerepo=base,extras,updates,epel。 对比结果。最后，可知，列表不同。说明本MariaDB.repo 已生效。 所以，以后每次安装软件前，可以先用yum search一下，这样，确保我们想要安装的，就是实际安装的 yum install 之前要做的事 sudo yum makecache sudo yum clean all sudo yum search XXX end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql系列之mysql-cluster]]></title>
      <url>%2F2016%2F11%2F15%2Fmysql-6mysql%E7%B3%BB%E5%88%97%E4%B9%8Bmariadb-cluster%2F</url>
      <content type="text"><![CDATA[mysql-cluster 主要参考http://mariadb.org/ 环境 centos7-amd64 mariadb10.1（IP:10.10.13.110） + mariadb5.5(IP:192.168.31.240) 步骤准备2台机器安装mariadb10.1 参考这里 把 mariadb5.5 的数据，导出后，导入到 mariadb10.1导出导入mysql主从复制 第一步，就要看这几个参考依次看 http://blog.csdn.net/gaowenhui2008/article/details/46698321 http://blog.csdn.net/hguisu/article/details/7325124 http://blog.jobbole.com/94595/ http://www.xuejiehome.com/blread-1664.html MYSQL主从同步的管理 参考 http://blog.csdn.net/gaowenhui2008/article/details/46698321 1. 停止MYSQL同步 1. 停止MYSQL同步 STOP SLAVE IO_THREAD; #停止IO进程 STOP SLAVE SQL_THREAD; #停止SQL进程 STOP SLAVE; #停止IO和SQL进程 2. 启动MYSQL同步 START SLAVE IO_THREAD; #启动IO进程 START SLAVE SQL_THREAD; #启动SQL进程 START SLAVE; #启动IO和SQL进程 3. 重置MYSQL同步 RESET SLAVE; 用于让从属服务器忘记其在主服务器的二进制日志中的复制位置, 它会删除master.info和relay-log.info文件，以及所有的中继日志，并启动一个新的中继日志,当你不需要主从的时候可以在从上执行这个操作。不然以后还会同步，可能会覆盖掉你的数据库，我以前就遇到过这样傻叉的事情。哈哈！ 4. 查看MYSQL同步状态 SHOW SLAVE STATUS; 这个命令主要查看Slave_IO_Running、Slave_SQL_Running、Seconds_Behind_Master、Last_IO_Error、Last_SQL_Error这些值来把握复制的状态。 5. 临时跳过MYSQL同步错误 经常会朋友mysql主从同步遇到错误的时候，比如一个主键冲突等，那么我就需要在确保那一行数据一致的情况下临时的跳过这个错误，那就需要使用SQL_SLAVE_SKIP_COUNTER = n命令了，n是表示跳过后面的n个事件,比如我跳过一个事件的操作如下： STOP SLAVE; SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1; START SLAVE; 6. 从指定位置重新同步 有的时候主从同步有问题了以后，需要从log位置的下一个位置进行同步，相当于跳过那个错误，这时候也可以使用CHANGE MASTER命令来处理，只要找到对应的LOG位置就可以,比如： CHANGE MASTER TO MASTER_HOST=&apos;10.1.1.75&apos;,MASTER_USER=&apos;replication&apos;,MASTER_PASSWORD=&apos;123456&apos;,MASTER_LOG_FILE=&apos;mysql-bin.000006&apos;, MASTER_LOG_POS=106; START SLAVE; MYSQL主从同步的管理经验介绍 1. 不要乱使用SQL_SLAVE_SKIP_COUNTER命令。 这个命令跳过之后很可能会导致你的主从数据不一致，一定要先将指定的错误记录下来，然后再去检查数据是否一致，尤其是核心的业务数据。 2. 结合percona-toolkit工具pt-table-checksum定期查看数据是否一致 这个是DBA必须要定期做的事情，呵呵，有合适的工具何乐而不为呢？另外percona-toolkit还提供了对数据库不一致的解决方案，可以采用pt-table-sync，这个工具不会更改主的数据。还可以使用pt-heartbeat来查看从服务器的复制落后情况。 具体的请查看：http://blog.chinaunix.net/uid-20639775-id-3229211.html。 3. 使用replicate-wild-ignore-table选项而不要使用replicate-do-db或者replicate-ignore-db。 原因已经在上面做了说明。 4. 将主服务器的日志模式调整成mixed。 5. 每个表都加上主键，主键对数据库的同步会有影响尤其是居于ROW复制模式。 mysql主从复制 情况１：主从mysql，之前都无数据 参考 http://blog.jobbole.com/94595/ http://www.xuejiehome.com/blread-1664.html 步骤 目标 10.10.12.14(主)10.10.12.15(从) 1、主从安装mysql，版本一致 mysql&gt;status; MariaDB [test]&gt; status; mysql Ver 15.1 Distrib 5.5.44-MariaDB, for Linux (x86_64) using readline 5.1 Connection id: 4Current database: testCurrent user: root@localhostSSL: Not in useCurrent pager: stdoutUsing outfile: ‘’Using delimiter: ;Server: MariaDBServer version: 5.5.44-MariaDB-log MariaDB ServerProtocol version: 10Connection: Localhost via UNIX socketServer characterset: utf8Db characterset: utf8Client characterset: utf8Conn. characterset: utf8UNIX socket: /var/lib/mysql/mysql.sockUptime: 18 min 15 sec Threads: 2 Questions: 24 Slow queries: 0 Opens: 1 Flush tables: 2 Open tables: 27 Queries per second avg: 0.021MariaDB [test]&gt; 2、修改master，slave服务器 master服务器配置： sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sock Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0 Settings user and group are ignored when systemd is used.If you need to run mysqld under a different user or group,customize your systemd unit file for mariadb according to theinstructions in http://fedoraproject.org/wiki/Systemdlog-bin=mysql-binserver-id=14binlog-ignore-db = mysql,information_schema [mysqld]server-id=14 #设置服务器唯一的id，默认是1，一般取IP最后一段，我们设置ip最后一段，slave设置14log-bin=mysql-bin 启用二进制日志binlog-ignore-db = mysql,information_schema #忽略写入binlog的库 slave服务器配置： sudo vi /etc/my.cnf [mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sock Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0 Settings user and group are ignored when systemd is used.If you need to run mysqld under a different user or group,customize your systemd unit file for mariadb according to theinstructions in http://fedoraproject.org/wiki/Systemdlog-bin=mysql-binserver-id=15replicate-wild-ignore-table=test.% #replicate-do-db = test #slave-skip-errors = all replicate-wild-ignore-table=test.% # replicate-do-db = test #上面２句都可以表示只同步test库(但是第一句更好，不要使用第２名)， ＃如果同步所有的库，则不要加上这一句slave-skip-errors = all #忽略因复制出现的所有错误 3、重启主从服务器mysql sudo systemctl restart mariadb.service sudo systemctl status mariadb.service 4、在主服务器上建立帐户并授权slave GRANT REPLICATION SLAVE ON . to ‘sync’@’10.10.12.%’ identified by ‘123.com’; 注意，这里是 10.10.12.%, 而不是10.10.12.我犯过这样的错误 GRANT REPLICATION SLAVE ON .* to ‘sync’@’10.10.12.15’ identified by ‘123.com’; 注意：大家在设置权限的时候不要将密码设置过于简单！ 5、查看主数据库状态 show master status\G; MariaDB [(none)]&gt; show master status;+——————+———-+————–+————————–+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+——————+———-+————–+————————–+| mysql-bin.000002 | 707 | | mysql,information_schema |+——————+———-+————–+————————–+1 row in set (0.00 sec) MariaDB [(none)]&gt; MariaDB [(none)]&gt; show master status\G;* 1. row * File: mysql-bin.000002 Position: 707 Binlog_Do_DB:Binlog_Ignore_DB: mysql,information_schema1 row in set (0.01 sec) ERROR: No query specified MariaDB [(none)]&gt; 记录下 File 及 Position 的值，在后面进行从服务器操作的时候需要用到。 6、配置从数据库 change master tomaster_host=’10.10.12.14’,master_user=’sync’,master_password=’123.com’,master_log_file’=’mysql-bin.000002’,master_log_pos=707; 7、启动slave同步进程并 MariaDB [(none)]&gt; start slave; 查看状态 MariaDB [(none)]&gt; show slave status\G; MariaDB [(none)]&gt; show slave status\G;* 1. row * Slave_IO_State: Waiting for master to send event Master_Host: 10.10.12.14 Master_User: sync Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000002 Read_Master_Log_Pos: 707 Relay_Log_File: mariadb-relay-bin.000002 Relay_Log_Pos: 838 Relay_Master_Log_File: mysql-bin.000002 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: test 其中Slave_IO_Running 与 Slave_SQL_Running 的值都必须为YES，才表明状态正常。 报错 主从同步出现一下错误：Slave_IO_Running: Connecting 导致lave_IO_Running 为connecting 的原因主要有以下 3 个方面： 1、网络不通 2、密码不对 解决 从服务器 STOP SLAVE; #停止IO和SQL进程 RESET SLAVE; STOP SLAVE; #停止IO和SQL进程 6、配置从数据库 change master tomaster_host=’10.10.12.14’,master_user=’sync’,master_password=’123.com’,master_log_file’=’mysql-bin.000002’,master_log_pos=707; START SLAVE; #启动IO和SQL进程 实操 MariaDB [(none)]&gt; reset slave;ERROR 1198 (HY000): This operation cannot be performed with a running slave; run STOP SLAVE firstMariaDB [(none)]&gt; stop slave;Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&gt; reset slave;Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&gt; show slave status\G;MariaDB [(none)]&gt; stop slave;Query OK, 0 rows affected, 1 warning (0.00 sec) MariaDB [(none)]&gt; change master to -&gt; master_host=’10.10.13.100’, -&gt; master_user=’sync’, -&gt; master_password=’sync.com’, -&gt; master_log_file=’mysql-bin.000001’, -&gt; master_log_pos=927;Query OK, 0 rows affected (0.01 sec) MariaDB [(none)]&gt; start slave;Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&gt; show slave status\G;* 1. row * Slave_IO_State: Waiting for master to send event Master_Host: 10.10.13.100 Master_User: sync Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000001 Read_Master_Log_Pos: 927 Relay_Log_File: mariadb-relay-bin.000002 Relay_Log_Pos: 529 Relay_Master_Log_File: mysql-bin.000001 Slave_IO_Running: Yes Slave_SQL_Running: Yes 3、pos不对 8、验证主从同步]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[code style]]></title>
      <url>%2F2016%2F11%2F07%2Fcode-style%2F</url>
      <content type="text"><![CDATA[代码风格, 所有的语言的代码风格汇总有的时候，真的是很困惑，我应该用什么代码风格. Airbnb JavaScript Style Guide 中文版 Airbnb JavaScript Style Guide Style Guide for Python Code Style guides for Google-originated open-source projects Google 开源项目风格指南 (中文版) Google 开源项目风格指南 github (中文版) Google JavaScript Style Guide(中文 版) analyzing code convention from github commits for Github data challenge, github地址 Code Guide by @AlloyTeam 盼望您的指定]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[essay 20161103 a]]></title>
      <url>%2F2016%2F11%2F03%2Fessay-20161103-a%2F</url>
      <content type="text"><![CDATA[生产环境、测试环境、开发环境、https://my.oschina.net/sancuo/blog/214904 开发环境 production environment; 测试环境 testing environment; 开发环境 development environment; 开发环境：开发环境是程序猿们专门用于开发的服务器，配置可以比较随意， 为了开发调试方便，一般打开全部错误报告。 测试环境：一般是克隆一份生产环境的配置，一个程序在测试环境工作不正常，那么肯定不能把它发布到生产机上。 生产环境：是值正式提供对外服务的，一般会关掉错误报告，打开错误日志。 三个环境也可以说是系统开发的三个阶段：开发-&gt;测试-&gt;上线，其中生产环境也就是通常说的真实环境。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[tomtsang2]]></title>
      <url>%2F2016%2F11%2F03%2Ftomtsang2%2F</url>
      <content type="text"><![CDATA[什么情况，明明我这个地方就是你想要的摘要嘛， 搞事情！ 以上是摘要以下是余下全文 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[tomtsang53535ere]]></title>
      <url>%2F2016%2F11%2F01%2Ftomtsang1%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
